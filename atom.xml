<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cooper Yang</title>
  
  <subtitle>A FrontEnd Engineer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-28T04:47:06.820Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cooper Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客界面崩溃问题（无样式）</title>
    <link href="http://yoursite.com/2018/11/28/%E5%8D%9A%E5%AE%A2%E7%95%8C%E9%9D%A2%E5%B4%A9%E6%BA%83%E9%97%AE%E9%A2%98%EF%BC%88%E6%97%A0%E6%A0%B7%E5%BC%8F%EF%BC%89/"/>
    <id>http://yoursite.com/2018/11/28/博客界面崩溃问题（无样式）/</id>
    <published>2018-11-27T16:00:00.000Z</published>
    <updated>2018-11-28T04:47:06.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客界面崩溃问题（无样式）"><a href="#博客界面崩溃问题（无样式）" class="headerlink" title="博客界面崩溃问题（无样式）"></a>博客界面崩溃问题（无样式）</h1><p>作为程序猿我相信很多小伙伴都有属于自己的技术型博客，博客相当于日记本，要天天更新它才能显示它的新颖和价值</p><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>本人最近发现我的博客每当更新内容之后博客界面就会出现异常情况：无样式，排列布局很混乱。类似于这样</p><p><img src="https://raw.githubusercontent.com/Foreverb/foreverb.github.io/master/images/blog.jpg" alt="image"></p><h2 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h2><p>没错，刚一开始我是一脸懵逼的，为什么一会没问题，一会又蹦出个没样式的问题呢？</p><p>于是我并没有想太多，直接去查看我github中存储我博客中所有文件的库，发现我css样式是15天前更新的</p><p><img src="https://raw.githubusercontent.com/Foreverb/foreverb.github.io/master/images/github.jpg" alt="image"></p><p>我就想是不是我所有css样式都没有更新上去，但假如就算没更新上去也有以前的css啊</p><p>虽然没有得到什么结果，但我没有放弃。我立即去问了一下我技术大佬的哥怎么回事，他给出了一个猜想：是不是没有清除浏览器的缓存。于是我便去清除了一下chrome的缓存，依然无样式，事实证明这个猜想不成立。</p><p>于是我陷入了死胡同……</p><p>无意间我打开控制台发现了重大的关键信息：</p><p><img src="https://raw.githubusercontent.com/Foreverb/foreverb.github.io/master/images/wrong.jpg" alt="image"></p><p>我立马提着这个问题去见了度娘，发现了这个报错的原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERR_CERT_COMMON_NAME_INVALID就是用一个错误的域名访问了某个节点的https资源。</span><br></pre></td></tr></table></figure><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>虽然并没有得到问题的根本所在，但这个结果又让我重新奋起，理清头绪重新来过。</p><p>根据上面得到的信息，我去看了一下我博客的源码，发现css引用的路径都是类似于这种：”/css/SimpleStyle.min.css”</p><p>也就是说我博客引用取的css样式路径是这样的：<a href="http://coopo.cc//css/SimpleStyle.min.css" target="_blank" rel="noopener">http://coopo.cc//css/SimpleStyle.min.css</a></p><p>在这之后我并没有做其他的是，而是回忆了一下一般一个完整的URL地址包括哪些内容?于是我在控制台输入了location，回车，展开发现了以下关键内容：</p><ul><li>hash</li><li>host</li><li>hostname</li><li>href</li><li>origin</li><li>pathname</li><li>port</li><li>protocol</li><li>search</li></ul><p>衍生知识结束后我立即做出了猜想：是不是我的css样式路径有问题？</p><p>于是我在控制台中，试着打开报错的css文件，发现一下问题</p><p><img src="https://raw.githubusercontent.com/Foreverb/foreverb.github.io/master/images/main.jpg" alt="image"></p><p>哎呀我去，这不是强制打开https网站才会出现的提示嘛，于是我做了以下操作：点击高级 -&gt; 点击（继续前往coopo.cc（不安全））；</p><p>发现可以看到css的源码，但是作为小白的我依然得不到什么结论。最后当我发现问题根本所在的时候，发现我的逻辑思维能力还是解决问题能力都好弱（弱鸡）</p><p>我本想再次尝试重新分析问题，然后刷新一下页面，发现博客界面竟然正常显示，也有样式。哎呀，这好比写代码，在键盘上一顿乱敲，无意间得到了结果。这时我心里好像有一万只草泥马在奔腾。</p><p>我知道，这不算解决问题，问题也并没有解决，于是…</p><p>我又去请教我的大神老哥，他给出了一下提示：</p><p>1.打开Safari浏览器再次查看控制台可能问题就清晰了</p><p>2.你博客请求的css文件的url的协议名是https</p><h2 id="再次猜想"><a href="#再次猜想" class="headerlink" title="再次猜想"></a>再次猜想</h2><p>不可能啊，我的域名是<a href="http://coopo.cc" target="_blank" rel="noopener">http://coopo.cc</a> ; 就算是里面的引用的文件路径的协议名应该也是http啊，为什么会变为https：难道是我请求css文件的时候升级了协议（http-&gt;https）;</p><h2 id="证明猜想"><a href="#证明猜想" class="headerlink" title="证明猜想"></a>证明猜想</h2><p>打开控制台，发现还真是：Upgrade-Insecure-Requests: 1，我查了一下这段请求头中的字段是什么意思</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">该指令用于让浏览器自动升级请求从http到https,用于大量包含</span><br><span class="line">http资源的http网页直接升级到https而不会报错.简洁的来讲,</span><br><span class="line">就相当于在http和https之间起的一个过渡作用.</span><br></pre></td></tr></table></figure><p>猜想成立…</p><p>然而我在代码中并没有写任何关于升级协议的代码啊，于是我再次打开源代码，发现了其中包含了这段标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>再次搜索这段代码是干什么用的，得到一个结果：</p><p>在html的头部加入meta使得所有的资源请求由http请求转成https请求</p><p>感觉这次不会再出错了，我于是立即删掉这段代码重新部署了一下我的博客，在浏览器地址栏中输入：<a href="http://coopo.cc" target="_blank" rel="noopener">http://coopo.cc</a></p><p><img src="https://raw.githubusercontent.com/Foreverb/foreverb.github.io/master/images/blg.jpg" alt="image"></p><p>问题解决了，欧耶！！！</p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>回想一下，原来我一直都在绕圈子。</p><p>当我在点击信任css文件查看其源码的时候，我应该看一下地址栏的；</p><ul><li>地址栏中该css文件是以https开头的</li></ul><p>我应该推测到我请求的是以http为协议名的css文件，而我却只有访问以https为协议名的css路径才能查看得到其源码</p><p>也就是说我请求css文件的时候，浏览器将我的http协议升级成了https协议</p><p>然后查看控制台中http报文中的内容我相信我应该可以独立解决这个问题。</p><p>当然这只是我解决问题之后的想法，问题当然只有碰到过，解决过才会感到简单</p><h3 id="大胆猜想，小心证明"><a href="#大胆猜想，小心证明" class="headerlink" title="大胆猜想，小心证明"></a>大胆猜想，小心证明</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;博客界面崩溃问题（无样式）&quot;&gt;&lt;a href=&quot;#博客界面崩溃问题（无样式）&quot; class=&quot;headerlink&quot; title=&quot;博客界面崩溃问题（无样式）&quot;&gt;&lt;/a&gt;博客界面崩溃问题（无样式）&lt;/h1&gt;&lt;p&gt;作为程序猿我相信很多小伙伴都有属于自己的技术型博客，
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="问题" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>软件设计模式</title>
    <link href="http://yoursite.com/2018/11/20/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/11/20/软件设计模式/</id>
    <published>2018-11-19T16:00:00.000Z</published>
    <updated>2018-11-28T04:35:31.578Z</updated>
    
    <content type="html"><![CDATA[<p>软件设计模式（Design pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。</p><p>为什么要提倡”Design Pattern”呢？根本原因是为了代码复用，增加可维护性。那么怎么才能实现代码复用呢？OO界有前辈的几个原则：”开－闭”原则(Open Closed Principal)、里氏代换原则、合成复用原则。设计模式就是实现了这些原则，从而达到了代码复用、增加可维护性的目的。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>1.什么是设计模式</p><p>答：设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。</p><p>设计模式代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。可以针对某一系列问题提供一个实现的思想，框架，让设计条理清晰。</p><p>2.为什么需要设计模式</p><p>答：设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案。因此，我们需要设计模式来解决复杂问题，使得分析问题更加明了，增强代码的可读性。</p><p>如果不使用设计模式对于简单的代码并没有什么影响，当代码长度过长的时候，不使用设计模式会使得代码晦涩难懂，缺乏可读性。运用设计模式让代码分块，更容易管理。</p><p>3.设计模式能给我们带来什么</p><p>答： 首先能给我们带来解决一类问题的基本思路，让实现起来更加清晰，并且设计完成之后，代码可重用性高。并且由于设计模式要遵循开闭原则，让后期代码维护也更加简单。最后要说的一点是，设计模式让使用者考虑问题养成从整体到局部的实现顺序，使得完成的更加顺利，合理运用类图使得实现简便。</p><p>4.设计模式学习面临的困难和解决思路</p><p>答： 设计模式初学起来会有些困难，因为模式种类多样，要去分别理解，而且设计模式还要遵循开闭等原则，学习初期可能会有点问题。并且设计模式采用的是自顶向下的设计方法，通过类图来做一个整体的构思，如果设计不好可能会对之后的实现造成困难。要想解决这些问题，首先要有钻研的精神，肯用功，要弄清楚这么多种设计模式的基本思想。并且还要多运用设计模式，运用设计模式要比理解还难，所以多运用，增强对设计模式的理解。</p><p>5.如何做到从了解模式到应用模式</p><p>答：首先应该正确理解设计模式，模式所关注的不仅是重复的解决方案，更主要的是关注重复出现的应用场景和与场景相关的各种作用力。其次应该针对问题，采取正确的设计模式，实际动手操作。应该做到看到一个问题能分析出需求的紧要程度，要在那个部分着重进行设计。还可以通过阅读成功的设计模式，来深入掌握设计模式的精髓，仔细分析成功的设计模式的设计思想，方便自己在之后中运用。</p><h2 id="四个要素"><a href="#四个要素" class="headerlink" title="四个要素"></a>四个要素</h2><p>设计模式使人们可以更加简单方便地复用成功的设计和体系结构。将已证实的技术表述成设计模式也会使新系统开发者更加容易理解其设计思路。</p><h3 id="模式名称"><a href="#模式名称" class="headerlink" title="模式名称"></a>模式名称</h3><p>一个助记名，它用一两个词来描述模式的问题、解决方案和效果。命名一个新的模式增加了我们的设计词汇。设计模式允许我们在较高的抽象层次上进行设计。基于一个模式词汇表，我们自己以及同事之间就可以讨论模式并在编写文档时使用它们。模式名可以帮助我们思考，便于我们与其他人交流设计思想及设计结果。找到恰当的模式名也是我们设计模式编目工作的难点之一。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>描述问题存在的前因后果，它可能描述了特定的设计问题，如怎样用对象表示算法等。也可能描述了导致不灵活设计的类或对象结构。有时候，问题部分会包括使用模式必须满足的一系列先决条件。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>描述了设计的组成成分，它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象组合）来解决这个问题。</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>描述了模式应用的效果及使用模式应权衡的问题。尽管我们描述设计决策时，并不总提到模式效果，但它们对于评价设计选择和理解使用模式的代价及好处具有重要意义。软件效果大多关注对时间和空间的衡量，它们也表述了语言和实现问题。因为复用是面向对象设计的要素之一，所以模式效果包括它对系统的灵活性、扩充性或可移植性的影响，显式地列出这些效果对理解和评价这些模式很有帮助。</p><p><img src="http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg" alt="image"></p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>总体来说设计模式分为三大类：</p><p>五种创建型模式：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p><p>七种结构型模式：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p>十一种行为型模式：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><h3 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h3><h4 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h4><ul><li>工厂方法模式</li></ul><p>工厂方法模式的创建是因为简单工厂模式有一个问题，在简单工厂模式中类的创建依赖工厂类，如果想要拓展程序，必须对工厂类进行修改，这违背了开闭原则，所以就出现了工厂方法模式，只需要创建一个工厂接口和多个工厂实现类，子类可以自己决定实例化哪一个工厂类，client类针对抽象接口进行编程，如果需要增加新的功能，继承工厂接口，直接增加新的工厂类就可以了，创建过程延迟到子类中进行，不需要修改之前的代码，满足了开闭原则，达到灵活地生产多种对象。</p><ul><li>抽象工厂模式</li></ul><p>抽象工厂模式是提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。区别于工厂方法模式的地方，工厂方法模式是创建一个工厂，可以实现多种对象；而抽象工厂模式是提供一个抽象工厂接口，里面定义多种工厂，每个工厂可以生产多种对象。前者的重点在于”怎么生产”，后者的重点在于”生产哪些”；前者是一个抽象产品类，可以派生出多个具体产品类，后者是多个抽象产品类，每个抽象产品类可以派生出多个具体产品类；前者的每个具体工厂类只能创建一个具体产品类的实例，后者的每个具体工厂类可以创建多个具体产品类的实例。</p><ul><li>单例模式</li></ul><p>单例模式能保证一个类仅有一个实例，并提供一个访问它的全局访问点，同时在类内部创造单一对象，通过设置权限，使类外部无法再创造对象。单例对象能保证在一个JVM中，该对象只有一个实例存在，这样做的好处就在于如果某些类创建比较频繁，特别是对于一些大型的对象，这是一笔很大的系统开销。在创建的时候，省去了new操作符，降低了系统内存的使用频率，减轻了系统的压力。同时单例模式保证在一个jvm中仅存在一个实例的好处就在于好比一个军队当中只会存在一个最高级别的军官来指挥整个军队，这样才能保证独立控制整个过程，否则如果出现多个，肯定会杂乱无序。</p><ul><li>建造者模式</li></ul><p>建造者模式是将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示，就好比是每个饭店或者每家都会做西红柿炒鸡蛋，最后虽然都是西红柿炒鸡蛋的外观，但是由于当中的做饭过程存在差别，所以味道会不同。在程序当中就是将一些不会变的基本组件，通过builder来进行组合，构建复杂对象，实现分离。这样做的好处就在于客户端不必知道产品内部组成的细节；同时具体的建造者类之间是相互独立的，对系统的扩展非常有利，满足开闭原则；由于具体的建造者类是独立的，因此可以对建造过程逐步细化，而不对其他的模块产生任何影响。</p><ul><li>原型模式</li></ul><p>原型模式是用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。其实就是将对象复制了一份并返还给调用者，对象需继承Cloneable并重写clone()方法。原型模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。分为浅复制和深复制，前者是将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的；后者是将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。</p><h4 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h4><ul><li>适配器模式</li></ul><p>适配器模式是使得原本由于接口不兼容而不能一起工作的那些类可以一起工作，衔接两个不兼容、独立的接口的功能，使得它们能够一起工作，适配器起到中介的作用。</p><ul><li>装饰模式</li></ul><p>装饰器模式是动态地给一个对象添加一些额外的职责，给一个对象增加一些新的功能，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例。除了动态的增加，也可以动态的撤销，要做到动态的形式，不可以用继承实现，因为继承是静态的。</p><ul><li>代理模式</li></ul><p>代理模式是为其他对象提供一种代理以控制对这个对象的访问，也就是创建类的代理类，间接访问被代理类的过程中，对其功能加以控制。它和装饰器模式的区别在于，装饰器模式为了增强功能，而代理模式是为了加以控制。代理模式就是多一个代理类出来，替原对象进行一些操作，例如买火车票不一定在火车站买，也可以去代售点。再比如打官司需要请律师，因为律师在法律方面有专长，可以替我们进行操作。</p><ul><li>外观模式</li></ul><p>外观模式是为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。在客户端和复杂系统之间再加一层，提供一个容易使用的外观层。外观模式是为了解决类与类之家的依赖关系的，外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，比如搜狐门户网站，就利用了外观模式。</p><ul><li>桥接模式</li></ul><p>桥接模式是将抽象部分与实现部分分离，使它们都可以独立的变化。桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化（突然联想到了mvc模式）。将抽象化与实现化解耦，使得二者可以独立变化，就好比现在常说的mvc模式，view和model之间通过control来控制，达到高内聚低耦合来解耦的目的。</p><ul><li>组合模式</li></ul><p>组合模式是将对象组合成树形结构以表示”部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。创建了一个包含自己对象组的类，并提供修改对象组的方法。在系统的文件和文件夹的问题上就使用了组合模式，文件下不可以有对象，而文件夹下可以有文件对象或者文件夹对象。</p><ul><li>享元模式</li></ul><p>享元模式是运用共享技术有效地支持大量细粒度的对象。享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，重用现有的同类对象，若未找到匹配的对象，则创建新对象，这样可以减少对象的创建，降低系统内存，提高效率。</p><h4 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h4><ul><li>策略模式</li></ul><p>策略模式是定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换，且算法的变化不会影响到使用算法的客户。。是为了统一接口下的一系列算法类（也就是多种策略），用一个类将其封装起来，使这些策略可动态切换。策略模式属于行为型模式，是为了使这些策略可以相互切换，是为了选择不同的行为。</p><ul><li>模版方法模式</li></ul><p>模板方法模式是定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。该模式就是在一个抽象类中，有一个主方法，再定义1…n个方法，可以是抽象的，也可以是实际的方法，定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤，将一些固定步骤、固定逻辑的方法封装成模板方法。调用模板方法即可完成那些特定的步骤。</p><ul><li>观察者模式</li></ul><p>观察者模式是定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。也就是当被观察者状态变化时，通知所有观察者，这种依赖方式具有双向性，在QQ邮箱中的邮件订阅和RSS订阅，当我们浏览一些博客时，经常会看到RSS图标，意思就是，当你订阅了该文章，如果后续有更新，会及时通知你。这种现象即是典型的观察者模式。</p><ul><li>迭代器模式</li></ul><p>迭代器模式是提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。在Java当中，将聚合类中遍历各个元素的行为分离出来，封装成迭代器，让迭代器来处理遍历的任务；使简化聚合类，同时又不暴露聚合类的内部，在我们经常使用的JDK中各个类也都是这些基本的东西。</p><ul><li>责任链模式</li></ul><p>责任链模式是避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。有多个对象，每个对象持有对下一个对象的引用，这样就会形成一条链，请求在这条链上传递，直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个对象会处理该请求。在生活中学生进行请假的过程中，会涉及到，学生请假会一级一级往上批，最终处理，具体由谁批准可能不清楚。在程序当中，现在使用的struts拦截器即用到了责任链模式。</p><ul><li>命令模式</li></ul><p>命令模式是将一个请求封装成一个对象，从而使发出者可以用不同的请求对客户进行参数化。模式当中存在调用者、接收者、命令三个对象，实现请求和执行分开；调用者选择命令发布，命令指定接收者。举个例子，司令员下令让士兵去干件事情，司令员的作用是发出口令，口令经过传递，传到了士兵耳朵里，士兵去执行。司令士兵命令三者相互解耦，任何一方都不用去依赖其他人。其实struts框架也涉及到命令模式的思想。</p><ul><li>备忘录模式</li></ul><p>备忘录模式是在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。创建一个备忘录类，用来存储原始类的信息；同时创建备忘录仓库类，用来存储备忘录类，主要目的是保存一个对象的某个状态，以便在适当的时候恢复对象，也就是做个备份。在系统当中使用的撤销操作，即是使用了备忘录模式，系统可以保存有限次数的文件状态，用户可以进行上几个状态的恢复，也就是用到了备忘录模式。</p><ul><li>状态模式</li></ul><p>状态模式是允许对象在内部状态发生改变时改变它的行为。对象具有多种状态，且每种状态具有特定的行为。在网站的积分系统中，用户具有不同的积分，也就对应了不同的状态；还有QQ的用户状态有几种状态，在线、隐身、忙碌等，每个状态对应不同的操作，而且你的好友也能看到你的状态。</p><ul><li>访问者模式</li></ul><p>访问者模式主要是将数据结构与数据操作分离。在被访问的类里面加一个对外提供接待访问者的接口，访问者封装了对被访问者结构的一些杂乱操作，解耦结构与算法，同时具有优秀的扩展性。通俗来讲就是一种分离对象数据结构与行为的方法，通过这种分离，可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果。访问者模式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中，其改变不影响系统数据结构。</p><ul><li>中介者模式</li></ul><p>中介者模式是用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。例如，MVC模式中control就是model和view的中介者。与适配器区别在于，适配器是为了兼容不同的接口，而中介者是为了将显示和操作分离。</p><ul><li>解释器模式</li></ul><p>解释器模式是给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子，基本也就用在这个范围内，适用面较窄，例如：正则表达式的解释等。</p><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><p>1、开闭原则（Open Close Principle）</p><p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><p>2、里氏代换原则（Liskov Substitution Principle）</p><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><p>3、依赖倒转原则（Dependence Inversion Principle）</p><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><p>4、接口隔离原则（Interface Segregation Principle）</p><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><p>5、迪米特法则，又称最少知道原则（Demeter Principle）</p><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><p>6、合成复用原则（Composite Reuse Principle）</p><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件设计模式（Design pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。&lt;/p&gt;
&lt;p&gt;为什么要提倡”Design Pattern”呢
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="开发" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="软件" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>HTML解析过程</title>
    <link href="http://yoursite.com/2018/11/15/HTML%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/11/15/HTML解析过程/</id>
    <published>2018-11-14T16:00:00.000Z</published>
    <updated>2018-11-28T04:34:50.043Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.w3.org/TR/html5/images/parsing-model-overview.png" alt="image"></p><h2 id="浏览器渲染HTML过程"><a href="#浏览器渲染HTML过程" class="headerlink" title="浏览器渲染HTML过程"></a>浏览器渲染HTML过程</h2><blockquote><p>每个浏览器有自带的渲染引擎，用来渲染内容。浏览器可以渲染html、xml或者渲染其他内容。但此处只讨论html及css的渲染过程。目前主流的几款浏览器，Firefox、Chrome和Safari基于两种渲染方式。Chrome、Safari使用webkit引擎渲染内容，而Firefox使用Geoko渲染引擎。虽然webkit和Geoko是两种不同引擎，但是基本渲染过程并无太大差异，所以一起进行讨论。</p></blockquote><p>基本过程：</p><ol><li>解析html</li><li>加载外部样式及外部脚本</li><li>构建dom树</li><li>构建render树</li><li>布局render树</li><li>绘制render树</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1. 用户输入网址,浏览器会向该网址服务器发出请求,服务器会返回html文件;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 浏览器开始载入html代码,发现&lt;head&gt;标签内有一个&lt;link&gt;标签引用外部CSS文件;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 浏览器又发出CSS文件的请求,服务器返回这个CSS文件;同理也会返回链接的其他css,js文件等</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 浏览器继续载入html中&lt;body&gt;部分的代码,并且CSS文件已经返回了,就可以开始渲染页面了;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5. 浏览器在代码中发现一个&lt;img&gt;标签引用了一张图片,向服务器发出请求。此时浏览器不会等到图片下载完,而是继续渲染后面的代码;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6. 服务器返回图片文件后,浏览器会回过头来重新渲染这部分代码;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7. 如果浏览器在html文件底部发现了一段Javascript代码;Javascript脚本执行了这条语句,假设这段代码是隐藏前面的某一个&lt;div&gt;,浏览器不得不返回重新渲染这部分代码;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8. 最终加载到&lt;/html&gt;结尾标签,完成页面的加载;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9. 页面加载完后,如果又执行一些会导致页面变化的js,浏览器会返回重新渲染这段代码;</span><br></pre></td></tr></table></figure><h2 id="解析html、加载外部样式及外部脚本、构建dom树"><a href="#解析html、加载外部样式及外部脚本、构建dom树" class="headerlink" title="解析html、加载外部样式及外部脚本、构建dom树"></a>解析html、加载外部样式及外部脚本、构建dom树</h2><blockquote><p>浏览器有专门的html解析器来解析html，并在解析过程中构建dom树。浏览器是以自上而下的方式解析html，link、style、script等标签会使解析过程产生阻塞，等待外部资源加载才会继续解析。</p></blockquote><hr><p>外部样式会阻塞内部脚本的执行。</p><p>外部样式与外部脚本并行加载，但外部样式会阻塞外部脚本执行。</p><p>如果外部脚本带有async属性，则外部脚本的加载与执行不受外部样式影响</p><p>如果link标签是动态创建（js生成），不管有无async属性，都不会阻塞外部脚本的加载与执行。</p><hr><h2 id="构建render树"><a href="#构建render树" class="headerlink" title="构建render树"></a>构建render树</h2><blockquote><p>在外部样式加载执行后，将css附着到对应的dom节点上，开始构建render树。render树的每一个节点即为与其相对应的DOM节点的CSS框，框的类型与DOM节点的display属性有关，block元素生成block框，inline元素生成inline框。每一个render树节点都有与之相对应的DOM节点，但DOM节点不一定有与之相对应的render树节点，比如display属性为none的DOM节点，而且render树节点在render树中的位置与他们在DOM树中的位置不一定相同，比如float与绝对定位元素。</p></blockquote><hr><p>render树的节点与dom节点的display属性有关</p><p>display为none的dom节点没有对应的render节点</p><p>float属性、position属性可能改变dom节点在render树中的位置</p><p>javascript可以操作dom以及css样式改变render树的生成</p><hr><p><img src="https://raw.githubusercontent.com/Foreverb/foreverb.github.io/master/images/render.jpg" alt="image"></p><h2 id="布局render树、绘制render树"><a href="#布局render树、绘制render树" class="headerlink" title="布局render树、绘制render树"></a>布局render树、绘制render树</h2><p>render树构建完成后开始布局过程，浏览器会计算render树节点在屏幕中对应的位置。在布局完成后，浏览器将<br>render树绘制在屏幕的过程称为绘制。绘制完成后浏览器会呈现一张完整的网页。</p><blockquote><p>css样式会阻塞图片加载</p></blockquote><blockquote><p>脚本不会阻塞图片加载</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://www.w3.org/TR/html5/images/parsing-model-overview.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;浏览器渲染HTML过程&quot;&gt;&lt;a href=&quot;#浏览器渲染HTML过程&quot; cla
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="原理" scheme="http://yoursite.com/tags/%E5%8E%9F%E7%90%86/"/>
    
      <category term="解析" scheme="http://yoursite.com/tags/%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>hexo的原理</title>
    <link href="http://yoursite.com/2018/11/14/hexo%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/11/14/hexo的原理/</id>
    <published>2018-11-13T16:00:00.000Z</published>
    <updated>2018-11-28T04:34:43.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo 是用来生成 HTML 的，github pages 用来展示 HTML（根据上面的介绍，我们可以理解我们还可以使用 coding 的 pages 服务，如果自己有服务器的话，可以上传到自己的服务器）。</p><p><img src="https://user-gold-cdn.xitu.io/2017/8/12/1a5437eb122fc14fc88b1920aed5dcca?imageslim" alt="image"></p><p>在 Hexo 的官网，我们可以直观的看到对 Hexo 的介绍：快速、简洁且高效的博客框架</p><p>在 Hexo 的文档中，我们可以找到官方对 Hexo 的定义：</p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h2 id="Hexo-的工作原理"><a href="#Hexo-的工作原理" class="headerlink" title="Hexo 的工作原理"></a>Hexo 的工作原理</h2><p>这里我们来分析一下 Hexo 每次部署的流程</p><p>hexo g：生成静态文件。将我们的数据和界面相结合生成静态文件的过程。会遍历主题文件中的 source 文件夹（js、css、img 等静态资源），然后建立索引，然后根据索引生成 pubild 文件夹中，此时的 publid 文件是由 html、 js、css、img 建立的纯静态文件可以通过 index.html 作为入口访问你的博客。</p><p>hexo d：部署文件。部署主要是根据在 _config.yml 中配置的 git 仓库或者 coding 的地址，将 public 文件上传至 github 或者 coding 中。然后再根据上面的 github 提供的 pages 服务呈现出页面。当然你也可以直接将你生成的 public 文件上传至你自己的服务器上。</p><h2 id="Hexo-的模板引擎"><a href="#Hexo-的模板引擎" class="headerlink" title="Hexo 的模板引擎"></a>Hexo 的模板引擎</h2><blockquote><p>模板引擎的作用，就是将界面与数据分离。最简单的原理是将模板内容中指定的地方替换成数据，实现业务代码与逻辑代码分离。</p></blockquote><p>我们可以注意到，在 Hexo 中，source 文件夹和 themes 文件夹是在同级的，我们就可以将 source 文件夹理解为数据库，而主题文件夹相当于 界面。然后我们 hexo g 就将我们的数据和界面相结合生成静态文件 public。</p><p>Hexo 的模板引擎是默认使用 ejs 编写的。hexo首先会解析 md 文件，然后根据 layout 判断布局类型，再调用其他的文件，这样每一块的内容都是独立的，提高代码的复用性。最终会生成一个 html 页面。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>非要说 Hexo 是什么的话，我觉得就是生成静态页面的工具，可以将我们使用 markdown 编写的内容与主题模板相结合，生成 HTML 静态文件。并且可以和 github 的 pages 或者其他可以将静态页面展现出来的服务（例如 coding 的 pages 服务）相结合，一键部署。</p><p>再深入一点讲 Hexo 的原理的话，那就应该是使用 yaml 语言 做配置文件，使用 ejs 或者 swig 作为主题模板，与使用 markdown 书写的内容结合，生成静态 HTML 文件。</p><h2 id="hexo的常用命令"><a href="#hexo的常用命令" class="headerlink" title="hexo的常用命令"></a>hexo的常用命令</h2><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #安装</span><br><span class="line">npm update hexo -g #更新</span><br><span class="line">hexo init #初始化</span><br></pre></td></tr></table></figure><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt; #发表草稿。</span><br></pre></td></tr></table></figure><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;name&quot; #新建文章</span><br><span class="line">hexo g #生成静态网页</span><br><span class="line">hexo p #发表草稿。</span><br><span class="line">hexo s #启动服务</span><br><span class="line">hexo d #部署网站 参数：-g 部署之前先生成静态文件。</span><br></pre></td></tr></table></figure><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装才能使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save #安装服务</span><br><span class="line"></span><br><span class="line">hexo s #启动服务</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo s -s #静态模式</span><br><span class="line">hexo s -i 192.168.1.1 #自定义ip</span><br><span class="line"></span><br><span class="line">hexo clean #清除缓存</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>两者作用完全相同。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;&lt;/a&gt;Hexo&lt;/h1&gt;&lt;p&gt;Hexo 是用来生成 HTML 的，github pages 用来展示 HTML（根据上面的介绍，我们可以理解我们还可以使用
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>项目功能模块开发流程</title>
    <link href="http://yoursite.com/2018/11/13/%E9%A1%B9%E7%9B%AE%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/11/13/项目功能模块开发流程/</id>
    <published>2018-11-12T16:00:00.000Z</published>
    <updated>2018-11-28T04:35:36.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>首先在开始项目或者独立的功能模块之前，我们必须要清楚自己的目标、要做什么、要做成什么样的，拟定好目标之后就可以继续下一步</p><h2 id="技术文档"><a href="#技术文档" class="headerlink" title="技术文档"></a>技术文档</h2><p>当你开始着手一个项目或者模块开发时不要急着写代码，因为你不知道你该做什么，也不知道该怎么做。所以这时候技术文档就起到了一定的作用：帮你理清思路。</p><p>那么技术文档该怎么写呢？技术文档的格式是什么样的呢？</p><blockquote><p>技术文档内需要写的是你的思路、想法、技术相关的api。写文档的时候你可以将你的项目分层，分成不同层次，然后在开发的时候可以根据不同的层次进行开发。对于文档的格式的话，我本人认为也没有什么特定的格式，你只需要将你要做的事情从大到小的一一列举出来，只要能帮你理清思路、能够从头到尾的解释清你开发的东西是什么，那么这篇文档就是成功的。</p></blockquote><p>文档写完后又改干嘛呢？那肯定是将文字抽象出来，将其转化为我们大脑能够容易理解一点的东西：画图。</p><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><p>无论是做静态页面还是整个项目，画图也是必须的，图画能使我们大脑记的更深刻。我们也知道，图是我们的思维逻辑抽象出来的，我把图画好，那么逻辑应该是没有问题的</p><h3 id="画图工具"><a href="#画图工具" class="headerlink" title="画图工具"></a>画图工具</h3><p>xmind、思维脑图、时序图。。。其它的不一一列举</p><h3 id="图怎么画"><a href="#图怎么画" class="headerlink" title="图怎么画"></a>图怎么画</h3><p>画图是帮我们理清思维逻辑，比如写静态页面之前，我们画图需要画的就是从最外层画起、从大到小。那么做整个项目或者是功能模块该怎么画呢？其实不然，也是和画静态页面的图类似。</p><ul><li>先画相关页面的图</li><li>然后画交互图</li><li>最后通过xmind将其中所有详细步骤包括相关api<ul><li>分层开发，一般为界面交互，前端处理，后端处理</li><li>界面交互方法、事件</li><li>前端一般处理的是数据类型、数据流转等</li><li>后端只管接收数据、转发数据处理</li></ul></li></ul><p>画完图后那么该做什么呢？因为这只是项目功能模块开发流程，所以你可以开心对着自己的流程图进行开发了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;首先在开始项目或者独立的功能模块之前，我们必须要清楚自己的目标、要做什么、要做成什么样的，拟定好目标之后就可以继续下一步&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="开发" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>js模拟UBB表情发送</title>
    <link href="http://yoursite.com/2018/11/10/ubb%E8%A1%A8%E6%83%85%E9%80%BB%E8%BE%91/"/>
    <id>http://yoursite.com/2018/11/10/ubb表情逻辑/</id>
    <published>2018-11-09T16:00:00.000Z</published>
    <updated>2018-11-28T04:35:11.356Z</updated>
    
    <content type="html"><![CDATA[<p>最近本人在用react开发一个在线视频聊天的项目的时候碰到了一个难题：发送带有表情的消息，或许对于大部分人来说算不上什么，<br>但作为前端小白的我，挨过这个坎其实也不易。</p><p>无论做什么事情，思路不清逻辑不顺的话，不说百分之百，反正一般人独立解决问题的话应该会有些困难的，本人个人观点。废话不多说</p><p>以下就是我解决这个问题的主要逻辑和思路；</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://raw.githubusercontent.com/Foreverb/foreverb.github.io/master/images/step.jpg" alt="image"></p><h5 id="设置和获取光标位置，可以自己在网上查找相关功能接口"><a href="#设置和获取光标位置，可以自己在网上查找相关功能接口" class="headerlink" title="设置和获取光标位置，可以自己在网上查找相关功能接口"></a>设置和获取光标位置，可以自己在网上查找相关功能接口</h5><h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><p>输入表情(微笑)或者(伤心) =&gt; [微笑] or [伤心]显示在输入框内，这就是下面会提到的UBB标签(字符串)；</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>前提，React Render 时，在JSX中，变量是 字符串或者是 JSX 对象，可以被正常渲染，字符串是字符串，JSX是对应的DOM元素</li><li>前提，React Render 时，在JSX中，变量是一个数组，数组中每个成员是字符串或者是JSX对象，则这个数组内所有的成员，都能被正常渲染</li><li>约定，发送或者接收的消息，都是特殊格式的字符串，聊天消息内容(字符串)+UBB标签(字符串)</li><li>猜想，若能够把消息字符串，转换为一个数组，聊天消息内容，为正常的字符串，UBB标签字符串转换为 JSX对象，类型为 img，img 的src 根据其内容不同而不同</li><li>故：只要把聊天消息，转换为React能接受的数组，即可完成 UBB表情功能</li></ol><p>由此，我做了一个实验，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例如：你好[笑脸]，不要不理我，[哭脸]。</span><br><span class="line">生成：</span><br><span class="line">out = [</span><br><span class="line">  &quot;你好&quot;,</span><br><span class="line">  &lt;img src=&quot;1.jpg&quot;&gt;,</span><br><span class="line">  &quot;，不要不理我，&quot;</span><br><span class="line">  &lt;img src=&quot;2.jpg&quot;&gt;,</span><br><span class="line">  &quot;。&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我将这变量out以：{out}这种形式将其放在了jsx对象中，刷新页面，发现out中的内容被渲染成了<br>文字加图片的形式：”你好😁，不要不理我，😭 “。于是这个猜想得到了验证</p><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><p>两种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">//first</span><br><span class="line">var i;</span><br><span class="line">var arr;</span><br><span class="line">var re = /\[[\u4e00-\u9fa5]&#123;2&#125;\]/g;</span><br><span class="line">fn(str)&#123;</span><br><span class="line">    for(i=0;i&lt;str.length;i++)&#123;</span><br><span class="line">      if( str[i]!==&apos;[&apos; )&#123;</span><br><span class="line">        arr.push(str[i])</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        arr.push(str.slice(i,i+4));</span><br><span class="line">        i = i+4;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr.map((item)=&gt;&#123;</span><br><span class="line">      if( re.test(item) )&#123;</span><br><span class="line">        return &lt;img src=&apos;&apos;/&gt;;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        return item;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">//second</span><br><span class="line">fn(str)&#123;</span><br><span class="line">  let word = str.split(re);</span><br><span class="line">  let src = str.match(re);</span><br><span class="line">  src = src.map((item)=&gt;&#123;</span><br><span class="line">    if( ChatClient.faceLibary[item] )&#123;</span><br><span class="line">      return &lt;img src=&#123;ChatClient.faceLibary[item]&#125;/&gt;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      return item</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  let all = new Array(src.length+word.length).fill(0);</span><br><span class="line">  for (var i = 0; i &lt; all.length; i++) &#123;</span><br><span class="line">    for( var n = 0; n &lt; word.length; n++ )&#123;</span><br><span class="line">        all.splice(i,1,word[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    if( (i+2)%2 === 1 )&#123;</span><br><span class="line">      for(var j = 0; j &lt; src.length; j++)&#123;</span><br><span class="line">          all.splice(i,1,src[j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也就是说，想要完成UBB表情功能，我们只需要将发送或者接受到的消息，从string的格式转化为<br>数组的格式，然后将这数组作为content，写入到jsx对象中，即可由react将其渲染为我们想看到<br>的内容：文字加图片</p><p>解决问题少不了逻辑和思维也就是思路，逻辑思维不清晰，最好不要继续下去，因为这样会使你大脑更乱<br>写代码亦是如此。</p><p>大胆猜想，小心实践，over ！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近本人在用react开发一个在线视频聊天的项目的时候碰到了一个难题：发送带有表情的消息，或许对于大部分人来说算不上什么，&lt;br&gt;但作为前端小白的我，挨过这个坎其实也不易。&lt;/p&gt;
&lt;p&gt;无论做什么事情，思路不清逻辑不顺的话，不说百分之百，反正一般人独立解决问题的话应该会有
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="UBB" scheme="http://yoursite.com/tags/UBB/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 call，apply 和 bind</title>
    <link href="http://yoursite.com/2018/11/02/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3call,bind,apply%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/11/02/深入了解call,bind,apply原理/</id>
    <published>2018-11-01T16:00:00.000Z</published>
    <updated>2018-11-28T04:35:22.896Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="http://www.cnblogs.com/onepixel/p/5143863.html" target="_blank" rel="noopener">http://www.cnblogs.com/onepixel/p/5143863.html</a></p><p>在JavaScript 中，call、apply 和 bind 是 Function 对象自带的三个方法，这三个方法的主要作用是改变函数中的 this 指向，从而可以达到<code>移花接木</code>的效果。本文将对这三个方法进行详细的讲解，并列出几个经典应用场景。</p><h2 id="1、call-thisArgs-args…"><a href="#1、call-thisArgs-args…" class="headerlink" title="1、call(thisArgs [,args…])"></a>1、call(thisArgs [,args…])</h2><p>该方法可以传递一个thisArgs参数和一个参数列表，thisArgs 指定了函数在运行期的调用者，也就是函数中的 this 对象，而参数列表会被传入调用函数中。thisArgs 的取值有以下四种情况：</p><ul><li>不传，或者传null,undefined， 函数中的 this 指向 window 对象</li><li>传递另一个函数的函数名，函数中的 this 指向这个函数的引用</li><li>传递字符串、数值或布尔类型等基础类型，函数中的 this - 指向其对应的包装对象，如 String、Number、Boolean</li><li>传递一个对象，函数中的 this 指向这个对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function a()&#123;</span><br><span class="line">    console.log(this);//输出函数a中的this对象</span><br><span class="line">&#125;</span><br><span class="line">function b()&#123;&#125;//定义函数b</span><br><span class="line"></span><br><span class="line">var obj = &#123;name:&apos;onepixel&apos;&#125;;//定义对象obj</span><br><span class="line"></span><br><span class="line">a.call();//window</span><br><span class="line">a.call(null);//window</span><br><span class="line">a.call(undefined);//window</span><br><span class="line">a.call(1);//Number</span><br><span class="line">a.call(&apos;&apos;);//String</span><br><span class="line">a.call(true);//Boolean</span><br><span class="line">a.call(b);// function b()&#123;&#125;</span><br><span class="line">a.call(obj);//Object</span><br></pre></td></tr></table></figure><p>这是call 的核心功能，它允许你在一个对象上调用该对象没有定义的方法，并且这个方法可以访问该对象中的属性，至于这样做有什么好处，我待会再讲，我们先看一个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;</span><br><span class="line"></span><br><span class="line">    name:&apos;onepixel&apos;,//定义a的属性</span><br><span class="line"></span><br><span class="line">    say:function()&#123;//定义a的方法</span><br><span class="line">        console.log(&quot;Hi,I&apos;m function a!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function b(name)&#123;</span><br><span class="line">    console.log(&quot;Post params: &quot;+ name);</span><br><span class="line">    console.log(&quot;I&apos;m &quot;+this.name);</span><br><span class="line">    this.say();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.call(a,&apos;test&apos;);</span><br><span class="line">&gt;&gt;</span><br><span class="line">Postparams: test</span><br><span class="line">I&apos;m onepixel</span><br><span class="line">I&apos;m function a!</span><br></pre></td></tr></table></figure><p>当执行b.call 时，字符串<code>test</code>作为参数传递给了函数b,由于call的作用，函数b中的this指向了对象a, 因此相当于调用了对象a上的函数b,而实际上a中没有定义b 。</p><h2 id="2、apply-thisArgs-args"><a href="#2、apply-thisArgs-args" class="headerlink" title="2、apply(thisArgs [,args[]])"></a>2、apply(thisArgs [,args[]])</h2><p>apply 和 call 的唯一区别是第二个参数的传递方式不同，apply 的第二个参数必须是一个数组，而 call 允许传递一个参数列表。值得你注意的是，虽然 apply 接收的是一个参数数组，但在传递给调用函数时，却是以参数列表的形式传递，我们看个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function b(x,y,z)&#123;</span><br><span class="line">    console.log(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.apply(null,[1,2,3]);// 1 2 3</span><br></pre></td></tr></table></figure><p>apply 的这个特性很重要，我们会在下面的应用场景中提到这个特性。</p><h2 id="3、bind-thisArgs-args…"><a href="#3、bind-thisArgs-args…" class="headerlink" title="3、bind(thisArgs [,args…])"></a>3、bind(thisArgs [,args…])</h2><p>bind是ES5 新增的一个方法，它的传参和call类似，但又和 call/apply 有着显著的不同，即调用 call 或 apply 都会自动执行对应的函数，而 bind 不会执行对应的函数，只是返回了对函数的引用。粗略一看，bind 似乎比call/apply 要落后一些，那ES5为什么还要引入bind 呢？</p><p>其实，ES5引入 bind 的真正目的是为了弥补 call/apply 的不足，由于 call/apply 会对目标函数自动执行，从而导致它无法在事件绑定函数中使用，因为事件绑定函数不需要我们手动执行，它是在事件被触发时由JS 内部自动执行的。而 bind 在实现改变函数 this 的同时又不会自动执行目标函数，因此可以完美的解决上述问题，看一个例子就能明白：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;name:&apos;onepixel&apos;&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 给document添加click事件监听，并绑定onClick函数</span><br><span class="line"> * 通过bind方法设置onClick的this为obj，并传递参数p1,p2</span><br><span class="line"> */</span><br><span class="line">document.addEventListener(&apos;click&apos;,onClick.bind(obj,&apos;p1&apos;,&apos;p2&apos;),false);</span><br><span class="line"></span><br><span class="line">//当点击网页时触发并执行</span><br><span class="line">function onClick(a,b)&#123;</span><br><span class="line">    console.log(</span><br><span class="line">            this.name,//onepixel</span><br><span class="line">            a,//p1</span><br><span class="line">            b //p2</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当点击网页时，onClick 被触发执行，输出onepixel p1 p2, 说明 onClick 中的 this 被 bind 改变成了obj 对象，为了对 bind 进行深入的理解，我们来看一下 bind 的 polyfill 实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">if (!Function.prototype.bind) &#123;</span><br><span class="line">    Function.prototype.bind = function (oThis) &#123;</span><br><span class="line">        var aArgs = Array.prototype.slice.call(arguments, 1),</span><br><span class="line">            fToBind =this,// this在这里指向的是目标函数</span><br><span class="line">            fBound = function () &#123;</span><br><span class="line">                return fToBind.apply(</span><br><span class="line">                    // 如果外部执行var obj = new fBound(),则将obj作为最终的this，放弃使用oThis</span><br><span class="line">                    this instanceof fToBind</span><br><span class="line">                            ?this  // 此时的this就是new出的obj</span><br><span class="line">                            : oThis ||this,// 如果传递的oThis无效，就将fBound的调用者作为this</span><br><span class="line"></span><br><span class="line">                    // 将通过bind传递的参数和调用时传递的参数进行合并，并作为最终的参数传递</span><br><span class="line">                    aArgs.concat(Array.prototype.slice.call(arguments)));</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        // 将目标函数的原型对象拷贝到新函数中，因为目标函数有可能被当作构造函数使用</span><br><span class="line">        fBound.prototype =this.prototype;</span><br><span class="line"></span><br><span class="line">        // 返回fBond的引用，由外部按需调用</span><br><span class="line">        return fBound;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一旦函数通过bind传递了有效的this对象，则该函数在运行期的this将指向这个对象，即使通过call或apply来试图改变this的指向也是徒劳的。"><a href="#一旦函数通过bind传递了有效的this对象，则该函数在运行期的this将指向这个对象，即使通过call或apply来试图改变this的指向也是徒劳的。" class="headerlink" title="一旦函数通过bind传递了有效的this对象，则该函数在运行期的this将指向这个对象，即使通过call或apply来试图改变this的指向也是徒劳的。"></a>一旦函数通过bind传递了有效的this对象，则该函数在运行期的this将指向这个对象，即使通过call或apply来试图改变this的指向也是徒劳的。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 实现数组的去重功能</span><br><span class="line">Array.prototype.unique = function(fn) &#123;</span><br><span class="line">        var rst = [];</span><br><span class="line">        var tmp = &#123;&#125;;</span><br><span class="line">        this.forEach(function(val) &#123;</span><br><span class="line">            // 使用call来改变fn的this指向，这里传window</span><br><span class="line">            var key =&apos;uniq&apos; + (typeof fn ===&apos;function&apos; ? fn.call(window, val) : val);</span><br><span class="line">            if (!tmp.hasOwnProperty(key)) &#123;</span><br><span class="line">                rst.push(val);</span><br><span class="line">                tmp[key] =null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,this);</span><br><span class="line"></span><br><span class="line">        return rst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 对象数组去重</span><br><span class="line">var arr = [</span><br><span class="line">    &#123; id: 2 &#125;, &#123; id: 4 &#125;, &#123; id: 3 &#125;, &#123; id: 3 &#125;, &#123; id: 4 &#125;, &#123; id: 6 &#125;</span><br><span class="line">]</span><br><span class="line">arr.unique(function(v) &#123;</span><br><span class="line">     console.log(this)// 使用bind传递了Array,则this一定是Array,而不会是window</span><br><span class="line">     return v.id</span><br><span class="line">&#125;.bind(Array));</span><br></pre></td></tr></table></figure><h2 id="4、应用场景一：继承"><a href="#4、应用场景一：继承" class="headerlink" title="4、应用场景一：继承"></a>4、应用场景一：继承</h2><p>大家知道，JavaScript中没有诸如Java、C# 等高级语言中的extend 关键字，因此JS 中没有继承的概念，如果一定要继承的话，call 和 apply 可以实现这个功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Animal(name,weight)&#123;</span><br><span class="line">   this.name = name;</span><br><span class="line">   this.weight = weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Cat()&#123;</span><br><span class="line">    Animal.call(this,&apos;cat&apos;,&apos;50&apos;);</span><br><span class="line">  //Animal.apply(this,[&apos;cat&apos;,&apos;50&apos;]);</span><br><span class="line"></span><br><span class="line">   this.say = function()&#123;</span><br><span class="line">      console.log(&quot;I am &quot; +this.name+&quot;,my weight is &quot; +this.weight);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var cat =new Cat();</span><br><span class="line">cat.say();//I am cat,my weight is 50</span><br></pre></td></tr></table></figure><p>当通过new 运算符产生了cat 时，Cat中的 this 就指向了cat对象(关于new运算符的讲解，请参考JS构造函数和new运算符，而继承的关键是在于Cat中执行了Animal.call(this,’cat’,’50’) 这句话，在call中将this作为thisArgs参数传递，于是Animal 方法中的 this 就指向了Cat中的 this，而 cat 中的 this 指向的是 cat 对象，所以Animal 中的 this 指向的就是 cat 对象，在 Animal 中定义了name 和 weight 属性，就相当于在 cat 中定义了这些属性，因此 cat 对象便拥有了Animal 中定义的属性，从而达到了继承的目的。</p><h2 id="5、应用场景二：移花接木"><a href="#5、应用场景二：移花接木" class="headerlink" title="5、应用场景二：移花接木"></a>5、应用场景二：移花接木</h2><p>在讲下面的内容之前，我们首先来认识一下JavaScript 中的一个非标准专业术语：ArrayLike (类数组/伪数组)</p><p>ArrayLike 对象即拥有数组的一部分行为，在DOM 中早已表现出来，而jQuery 的崛起让ArrayLike 在JavaScript 中大放异彩。ArrayLike 对象的精妙在于它和JS 原生的 Array 类似，但是它是自由构建的，它来自开发者对JavaScript 对象的扩展，也就是说：对于它的原型(prototype)我们可以自由定义，而不会污染到JS原生的Array。</p><p>ArrayLike 对象在JS中被广泛使用，比如DOM 中的NodeList, 函数中的arguments 都是类数组对象，这些对象像数组一样存储着每一个元素，但它没有操作数组的方法，而我们可以通过call 将数组的某些方法<code>移接</code>到ArrayLike 对象，从而达到操作其元素的目的。比如我们可以这样遍历函数中的arguments:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">    // 检测arguments是否为Array的实例</span><br><span class="line">    console.log(</span><br><span class="line">            arguments instanceof Array,//false</span><br><span class="line">            Array.isArray(arguments) //false</span><br><span class="line">    );</span><br><span class="line">    // 判断arguments是否有forEach方法</span><br><span class="line">    console.log(arguments.forEach);//undefined</span><br><span class="line"></span><br><span class="line">    // 将数组中的forEach应用到arguments上</span><br><span class="line">    Array.prototype.forEach.call(arguments,function(item)&#123;</span><br><span class="line">        console.log(item);// 1 2 3 4</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">test(1,2,3,4);</span><br></pre></td></tr></table></figure><p>除此之外，对于apply 而言，我们上面提到了它独有的一个特性，即apply 接收的是数组，在传递给调用函数的时候是以参数列表传递的。 这个特性让apply 看起来比call 略胜一筹，比如有这样一个场景：给定一个数组[1,3,4,7]，然后求数组中的最大元素，而我们知道，数组中并没有获取最大值的方法，一般情况下，你需要通过编写代码来实现。而我们知道，Math 对象中有一个获取最大值的方法，即Math.max()， max方法需要传递一个参数列表，然后返回这些参数中的最大值。而apply 不仅可以将Math 对象的max 方法应用到其他对象上，还可以将一个数组转化为参数列表传递给max,看代码就能一目了然：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [2,3,1,5,4];</span><br><span class="line"></span><br><span class="line">Math.max.apply(null,arr);// 5</span><br></pre></td></tr></table></figure><p>以上便是 call 和 apply 比较经典的几个应用场景，熟练掌握这些技巧，并把这些特性应用到你的实际项目中，会使你的代码看起来更加耐人寻味！</p><hr><p>原创发布 @一像素  博客园 2016.01</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自：&lt;a href=&quot;http://www.cnblogs.com/onepixel/p/5143863.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cnblogs.com/onepixel/p/5143863.html
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Node自动重启工具 nodemon</title>
    <link href="http://yoursite.com/2018/11/01/node%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2018/11/01/node自动重启工具/</id>
    <published>2018-10-31T16:00:00.000Z</published>
    <updated>2018-11-28T04:34:57.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要使用"><a href="#为什么要使用" class="headerlink" title="为什么要使用"></a>为什么要使用</h3><p>在编写调试Node.js项目，修改代码后，需要频繁的手动close掉，然后再重新启动，非常繁琐。现在，我们可以使用nodemon这个工具，它的作用是监听代码文件的变动，当代码改变之后，自动重启。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm/cnpm install -g nodemon</span><br></pre></td></tr></table></figure><p>安装在全局。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>编写代码 app.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&quot;express&quot;)</span><br><span class="line"></span><br><span class="line">var app = express()</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;,function(req,res) &#123;</span><br><span class="line">    res.send(&quot;hello world&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000,function()&#123;</span><br><span class="line">    console.log(&apos;server is running&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里使用了express框架。</p><p>传统的方法，我们使用node app.js命令，程序将启动。其实，我们刚才下载的nodemon工具也可以用来启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure><p>我们访问3000端口，可以看到hellloworld。</p><p>我们现在尝试修改一下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/&apos;,function(req,res) &#123;</span><br><span class="line">    res.send(&quot;hello 杨古波&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>保存之后，我们可以看到命令行中，输出了以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[nodemon] restarting due to changes...</span><br><span class="line">[nodemon] starting `node app.js`</span><br></pre></td></tr></table></figure><p>我们只需要刷新浏览器，就可以看到改动后的内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要使用&quot;&gt;&lt;a href=&quot;#为什么要使用&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用&quot;&gt;&lt;/a&gt;为什么要使用&lt;/h3&gt;&lt;p&gt;在编写调试Node.js项目，修改代码后，需要频繁的手动close掉，然后再重新启动，非常繁琐。现在，我们可
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Promise 的基础用法</title>
    <link href="http://yoursite.com/2018/10/31/Promise%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/31/Promise的基本用法/</id>
    <published>2018-10-30T16:00:00.000Z</published>
    <updated>2018-11-28T04:35:05.007Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Promise-的含义"><a href="#Promise-的含义" class="headerlink" title="Promise 的含义"></a>Promise 的含义</h3><p>Promise 是异步编程的一种解决方案，比传统的解决方案–回调函数和事件－－更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了语法，原生提供了Promise</p><p>所谓Promise ，简单说就是一个容器，里面保存着某个未来才回结束的事件(通常是一个异步操作）的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。<br>Promise 对象的状态不受外界影响</p><h3 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态:"></a>三种状态:</h3><ul><li>pending：进行中</li><li>fulfilled :已经成功</li><li>rejected 已经失败</li></ul><p>状态改变：</p><p>Promise对象的状态改变，只有两种可能：</p><p>从pending变为fulfilled(resolve)</p><p>从pending变为rejected。(reject)</p><p>这两种情况只要发生，状态就凝固了，不会再变了，这时就称为resolved（已定型）</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>ES6规定，Promise对象是一个构造函数，用来生成Promise实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const promist = new Promise(function(resolve,reject)&#123;</span><br><span class="line">    if(/*异步操作成功*/)&#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</p><p>reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>Promise 实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(function(value)&#123;</span><br><span class="line">//success</span><br><span class="line">&#125;,function(error)&#123;</span><br><span class="line">//failure</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function timeout(ms)&#123;</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        setTimeout(resolve,ms,&apos;done&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">timeout(100).then((value)=&gt;&#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve,reject)&#123;</span><br><span class="line">    console.log(&apos;Promise&apos;);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(function()&#123;</span><br><span class="line">    console.log(&apos;resolved&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&apos;Hi!&apos;);</span><br><span class="line"></span><br><span class="line">//Promise</span><br><span class="line">//Hi!</span><br><span class="line">//resolved</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//异步加载图片</span><br><span class="line">function loadImageAsync(url)&#123;</span><br><span class="line">    return new Promise(function(resolve,reject)&#123;</span><br><span class="line">        const image = new Image();</span><br><span class="line">        image.onload = function()&#123;</span><br><span class="line">            resolve(image);</span><br><span class="line">        &#125;;</span><br><span class="line">        image.onerror = function()&#123;</span><br><span class="line">            reject(new Error(&apos;error&apos;);</span><br><span class="line">        &#125;;</span><br><span class="line">        image.src = url;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个用Promise对象实现的 Ajax 操作的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const getJSON = function(url) &#123;</span><br><span class="line">  const promise = new Promise(function(resolve, reject)&#123;</span><br><span class="line">    const handler = function() &#123;</span><br><span class="line">      if (this.readyState !== 4) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      if (this.status === 200) &#123;</span><br><span class="line">        resolve(this.response);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        reject(new Error(this.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    const client = new XMLHttpRequest();</span><br><span class="line">    client.open(&quot;GET&quot;, url);</span><br><span class="line">    client.onreadystatechange = handler;</span><br><span class="line">    client.responseType = &quot;json&quot;;</span><br><span class="line">    client.setRequestHeader(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">    client.send();</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getJSON(&quot;/posts.json&quot;).then(function(json) &#123;</span><br><span class="line">  console.log(&apos;Contents: &apos; + json);</span><br><span class="line">&#125;, function(error) &#123;</span><br><span class="line">  console.error(&apos;出错了&apos;, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Promise-的含义&quot;&gt;&lt;a href=&quot;#Promise-的含义&quot; class=&quot;headerlink&quot; title=&quot;Promise 的含义&quot;&gt;&lt;/a&gt;Promise 的含义&lt;/h3&gt;&lt;p&gt;Promise 是异步编程的一种解决方案，比传统的解决方案–回调函数
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>git 常用命令</title>
    <link href="http://yoursite.com/2018/10/30/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/10/30/git常用命令/</id>
    <published>2018-10-29T16:00:00.000Z</published>
    <updated>2018-11-28T04:34:39.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure><h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的代码差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br><span class="line"></span><br><span class="line"># 从本地master拉取代码更新当前分支：branch 一般为master</span><br><span class="line">$ git rebase [branch]</span><br></pre></td></tr></table></figure><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ git remote update  --更新远程仓储</span><br><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、新建代码库&quot;&gt;&lt;a href=&quot;#一、新建代码库&quot; class=&quot;headerlink&quot; title=&quot;一、新建代码库&quot;&gt;&lt;/a&gt;一、新建代码库&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git 创建、查看、删除、切换分支问题</title>
    <link href="http://yoursite.com/2018/10/29/git%E5%88%9B%E5%BB%BA%EF%BC%8C%E6%9F%A5%E7%9C%8B%EF%BC%8C%E5%88%A0%E9%99%A4%EF%BC%8C%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF/"/>
    <id>http://yoursite.com/2018/10/29/git创建，查看，删除，切换分支/</id>
    <published>2018-10-28T16:00:00.000Z</published>
    <updated>2018-11-28T04:34:32.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、使用背景"><a href="#一、使用背景" class="headerlink" title="一、使用背景"></a>一、使用背景</h2><p>总所周知，在日常开发中，我们需要把测试服务器和正式服务器分开。相应的，为了保持正式版本能正常运行，我们需要新建一个git分支用来专门的存放正式版APP的源码。</p><p>这样，每当我们生成一个版本的时候，我们都可以把稳定版本的源码放到online这个分支上。然后在master分支上继续开发新功能。当需要升级版本的时候，我们只需要把master分支上成熟的代码推送到online分支即可。</p><h2 id="二、创建分支及其相关命令"><a href="#二、创建分支及其相关命令" class="headerlink" title="二、创建分支及其相关命令"></a>二、创建分支及其相关命令</h2><p>1、创建新分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//新建online分支</span><br><span class="line">git checkout -b online</span><br></pre></td></tr></table></figure><p>2、查看当前所有分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//查看当前所有的分支</span><br><span class="line">git branch -a</span><br><span class="line">//结果显示带*号的，而且颜色是绿色的即为我们当前所在的分支</span><br><span class="line">*master</span><br><span class="line">online</span><br></pre></td></tr></table></figure><p>3、切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//从当前的master分支切换到online分支上面</span><br><span class="line">git checkout online</span><br><span class="line">//此时可以查看分支,使用git branch即可看到master和online分支</span><br><span class="line">git branch</span><br></pre></td></tr></table></figure><p>4、删除分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//删除online分支</span><br><span class="line">git branch -d online</span><br></pre></td></tr></table></figure><p>5、本地合并新分支代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//origin是本地默认的一个名称，自己在新建本地仓库的时候是可以改名的</span><br><span class="line">//平常使用的git pull都是默认从master分支上拉去代码。这里是从online分支上拉取代码</span><br><span class="line">git pull origin online</span><br></pre></td></tr></table></figure><p>6、本地提交代码到新的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这里和上面的git pull差不多。是提交本地代码到online分支</span><br><span class="line">git push origin online</span><br></pre></td></tr></table></figure><h2 id="三、需要注意的问题"><a href="#三、需要注意的问题" class="headerlink" title="三、需要注意的问题"></a>三、需要注意的问题</h2><p>1、远程新建分支之后，本地如果立刻使用 git branch -a 查看分支的话，会看不到新建的分支。需要现在本地git pull一下。</p><p>2、如果我们已经通过git checkout master，切换到了master分支。那么我们在本地通过git pull和git push 都可以直接拉去或提交代码到master分支。git会默认使用你当前所在的分支</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、使用背景&quot;&gt;&lt;a href=&quot;#一、使用背景&quot; class=&quot;headerlink&quot; title=&quot;一、使用背景&quot;&gt;&lt;/a&gt;一、使用背景&lt;/h2&gt;&lt;p&gt;总所周知，在日常开发中，我们需要把测试服务器和正式服务器分开。相应的，为了保持正式版本能正常运行，我们需要新
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>js获取光标位置</title>
    <link href="http://yoursite.com/2018/10/16/js%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/10/16/js获取光标位置/</id>
    <published>2018-10-15T16:00:00.000Z</published>
    <updated>2018-11-28T04:34:54.165Z</updated>
    
    <content type="html"><![CDATA[<ol><li>概念和原理</li></ol><blockquote><p>DOM中并没有直接获取光标位置的方法，那么我们只能间接来获取光标位置。DOM支持获取光标选中的范围，我们可以以此为切入点，来获取或定位光标的位置。当选取范围起始点和结束点一样时，就是光标插入的位置。</p></blockquote><ul><li>术语</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">anchor(瞄点)：选区起点。</span><br><span class="line"></span><br><span class="line">focus(焦点)：选区终点。</span><br><span class="line"></span><br><span class="line">range(范围)：选区范围，包含整个节点或节点的一部分。</span><br></pre></td></tr></table></figure><ul><li>Selection</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Selection:Selection对象表示用户选择的文本范围或插入符号的位置。</span><br><span class="line"></span><br><span class="line">Selection对象存在于window对象上，可以通过window.getSelection()获取示例。</span><br></pre></td></tr></table></figure><h5 id="Selection选取的节点范围都是块级节点。input和texteare并不能作为Selection的节点"><a href="#Selection选取的节点范围都是块级节点。input和texteare并不能作为Selection的节点" class="headerlink" title="Selection选取的节点范围都是块级节点。input和texteare并不能作为Selection的节点"></a>Selection选取的节点范围都是块级节点。input和texteare并不能作为Selection的节点</h5><p>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">anchorNode:选区起点的节点。</span><br><span class="line"></span><br><span class="line">anchorOffset:选区的起点位置。</span><br><span class="line"></span><br><span class="line">focusNode:选区终点的节点。</span><br><span class="line"></span><br><span class="line">focusOffset:选区的终点位置。</span><br><span class="line"></span><br><span class="line">isCollapsed:起点和终点是否重叠。</span><br><span class="line"></span><br><span class="line">rangeCount:选区包含的range数目。</span><br></pre></td></tr></table></figure><p>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">getRangeAt(index):获取指定的选取范围。</span><br><span class="line"></span><br><span class="line">addRange(range):将一个范围添加到Selection对象中。</span><br><span class="line"></span><br><span class="line">removeRange():移出指定的范围。</span><br><span class="line"></span><br><span class="line">removeAllRanges():移出所有range对象。</span><br><span class="line"></span><br><span class="line">collapse(parentNode,offset):将光标移动到parentNode节点的offset位置。</span><br><span class="line"></span><br><span class="line">collapseToStart():取消当前选区，并把光标定位在原选区的最开始处，如果此时光标所处的位置是可编辑的，且它获得了焦点，则光标会在原地闪烁。</span><br><span class="line"></span><br><span class="line">collapseToEnd():取消当前选区，并将光标定位到原选取的最末位。如果此时光标所处的位置是可编辑的，且它获得了焦点，则光标会在原地闪烁。</span><br><span class="line"></span><br><span class="line">extend(node,offset):将终点位置移动到node节点的offset位置。</span><br><span class="line"></span><br><span class="line">modify(alter,direction,granularity):通过alter方式(move/extend)来改变光标位置，移动方向为direction(left/right)，移动单位为granularity。</span><br><span class="line"></span><br><span class="line">containsNode(aNode,aPartlyContained):判断aNode是否包含在Selection中。aPartlyContained为false表示全包含，为true表示只要部分包含即可。</span><br><span class="line"></span><br><span class="line">toString():放回当前Selection对象的字符串。</span><br></pre></td></tr></table></figure><ul><li>Range</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Range对象表示一个Selection的选择范围，一个Selection可以包含多个Range。</span><br></pre></td></tr></table></figure><p>获取对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.createRange():创建一个Range。</span><br><span class="line"></span><br><span class="line">selection.getRangeAt(index):获取指定的Range。</span><br></pre></td></tr></table></figure><p>属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">collapsed:判断起始位置是否重合。</span><br><span class="line"></span><br><span class="line">endContaniner:range终点节点。</span><br><span class="line"></span><br><span class="line">endOffset:range的终点位置。</span><br><span class="line"></span><br><span class="line">startContaniner:ranstartge起点节点。</span><br><span class="line"></span><br><span class="line">startOffset:range的起点位置。</span><br><span class="line"></span><br><span class="line">commonAncestorContainer:包含起始点的节点。</span><br></pre></td></tr></table></figure><p>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">setStart(startNode,startOffset):设置范围在startNode的起始位置为startOffset。</span><br><span class="line"></span><br><span class="line">setEnd(endNode,endOffset):设置范围在endNode的起始位置为endOffset。</span><br><span class="line"></span><br><span class="line">selectNode(referenceNode):设置range的节点为referenceNode。</span><br><span class="line"></span><br><span class="line">selectNodeContents(referenceNode):设置range的内容为referenceNode。</span><br><span class="line"></span><br><span class="line">collapse(toStart):向边界点折叠range，即是设置光标位置，toStart默认为false，表示光标定位在节点末尾。true表示光标定位在节点起点。</span><br><span class="line"></span><br><span class="line">cloneContents():克隆一个range的内容片段。</span><br><span class="line"></span><br><span class="line">deleteContents():删除range的内容片段。</span><br><span class="line"></span><br><span class="line">extractContents():将range的内容从文档树移动到文档片段中。</span><br><span class="line"></span><br><span class="line">insertNode(newNode):在range的其实位置插入新的节点。</span><br><span class="line"></span><br><span class="line">surroundContents(newNode):将range对象的内容移动到新的节点中。</span><br><span class="line"></span><br><span class="line">cloneRange():克隆一个range对象。</span><br><span class="line"></span><br><span class="line">detach():释放当前range。</span><br></pre></td></tr></table></figure><ul><li>input/textarea</li></ul><blockquote><p>在html5中，可输入性表单元素（input/textarea）都存在以下属性。不支持IE6/7。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">selectionDirection:forward | backward | none,选区方向</span><br><span class="line">selectionEnd:选区终点位置</span><br><span class="line">selectionStart:选区起点位置</span><br></pre></td></tr></table></figure><blockquote><p>setSelectionRange(selectionStart, selectionEnd, [selectionDirection]):设置获取焦点的输入性元素的选区范围。</p></blockquote><ol start="2"><li>获取光标位置</li></ol><ul><li>可编辑div获取光标位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//获取当前光标位置</span><br><span class="line">const getCursortPosition = function (element) &#123;</span><br><span class="line">  var caretOffset = 0;</span><br><span class="line">  var doc = element.ownerDocument || element.document;</span><br><span class="line">  var win = doc.defaultView || doc.parentWindow;</span><br><span class="line">  var sel;</span><br><span class="line">  if (typeof win.getSelection != &quot;undefined&quot;) &#123;//谷歌、火狐</span><br><span class="line">    sel = win.getSelection();</span><br><span class="line">    if (sel.rangeCount &gt; 0) &#123;//选中的区域</span><br><span class="line">      var range = win.getSelection().getRangeAt(0);</span><br><span class="line">      var preCaretRange = range.cloneRange();//克隆一个选中区域</span><br><span class="line">      preCaretRange.selectNodeContents(element);//设置选中区域的节点内容为当前节点</span><br><span class="line">      preCaretRange.setEnd(range.endContainer, range.endOffset);  //重置选中区域的结束位置</span><br><span class="line">      caretOffset = preCaretRange.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else if ((sel = doc.selection) &amp;&amp; sel.type != &quot;Control&quot;) &#123;//IE</span><br><span class="line">    var textRange = sel.createRange();</span><br><span class="line">    var preCaretTextRange = doc.body.createTextRange();</span><br><span class="line">    preCaretTextRange.moveToElementText(element);</span><br><span class="line">    preCaretTextRange.setEndPoint(&quot;EndToEnd&quot;, textRange);</span><br><span class="line">    caretOffset = preCaretTextRange.text.length;</span><br><span class="line">  &#125;</span><br><span class="line">  return caretOffset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">获取光标的位置是先通过获取鼠标的选取范围，然后克隆该选</span><br><span class="line">取范围，修改克隆范围的结束位置，这样克隆的范围就只剩下</span><br><span class="line">起点到结束点的内容，光标之后的内容被截取扔掉了。所以可</span><br><span class="line">以通过剩余内容的长度来确定光标位置。之所以要克隆一个选</span><br><span class="line">取范围出来，是为了避免修改光标结束位置时影响到原先内容</span><br></pre></td></tr></table></figure><p>input/textarea获取光标位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//输入框获取光标</span><br><span class="line">const getPosition = function (element) &#123;</span><br><span class="line">    let cursorPos = 0;</span><br><span class="line">    if (document.selection) &#123;//IE</span><br><span class="line">        var selectRange = document.selection.createRange();</span><br><span class="line">        selectRange.moveStart(&apos;character&apos;, -element.value.length);</span><br><span class="line">        cursorPos = selectRange.text.length;</span><br><span class="line">    &#125; else if (element.selectionStart || element.selectionStart == &apos;0&apos;) &#123;</span><br><span class="line">        cursorPos = element.selectionStart;</span><br><span class="line">    &#125;</span><br><span class="line">    return cursorPos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>设置光标位置</li></ol><blockquote><p>可编辑div设置光标位置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//设置光标位置</span><br><span class="line">const setCaretPosition = function (element, pos) &#123;</span><br><span class="line">  var range, selection;</span><br><span class="line">  if (document.createRange)//Firefox, Chrome, Opera, Safari, IE 9+</span><br><span class="line">  &#123;</span><br><span class="line">    range = document.createRange();//创建一个选中区域</span><br><span class="line">    range.selectNodeContents(element);//选中节点的内容</span><br><span class="line">    if(element.innerHTML.length &gt; 0) &#123;</span><br><span class="line">      range.setStart(element.childNodes[0], pos); //设置光标起始为指定位置</span><br><span class="line">    &#125;</span><br><span class="line">    range.collapse(true);       //设置选中区域为一个点</span><br><span class="line">    selection = window.getSelection();//获取当前选中区域</span><br><span class="line">    selection.removeAllRanges();//移出所有的选中范围</span><br><span class="line">    selection.addRange(range);//添加新建的范围</span><br><span class="line">  &#125;</span><br><span class="line">  else if (document.selection)//IE 8 and lower</span><br><span class="line">  &#123;</span><br><span class="line">    range = document.body.createTextRange();//Create a range (a range is a like the selection but invisible)</span><br><span class="line">    range.moveToElementText(element);//Select the entire contents of the element with the range</span><br><span class="line">    range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start</span><br><span class="line">    range.select();//Select the range (make it the visible selection</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> input/textarea获取光标位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 设置光标位置</span><br><span class="line">function setCaretPosition(textDom, pos)&#123;</span><br><span class="line">    if(textDom.setSelectionRange) &#123;</span><br><span class="line">        // IE Support</span><br><span class="line">        textDom.focus();</span><br><span class="line">        textDom.setSelectionRange(pos, pos);</span><br><span class="line">    &#125;else if (textDom.createTextRange) &#123;</span><br><span class="line">        // Firefox support</span><br><span class="line">        var range = textDom.createTextRange();</span><br><span class="line">        range.collapse(true);</span><br><span class="line">        range.moveEnd(&apos;character&apos;, pos);</span><br><span class="line">        range.moveStart(&apos;character&apos;, pos);</span><br><span class="line">        range.select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>示例</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;光标测试&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    p &#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      flex-direction: row;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn &#123;</span><br><span class="line">      height: 24px;</span><br><span class="line">      margin: 0 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .edit-div &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width: 225px;</span><br><span class="line">      border: 1px solid #decdcd;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line"></span><br><span class="line">    function getCursortPosition(e) &#123;</span><br><span class="line">      var eleP = e.target.parentNode; //获取父级元素</span><br><span class="line">      var pos = 0;</span><br><span class="line">      if (e.target.nodeName == &quot;DIV&quot;) &#123;</span><br><span class="line">        pos = getDivPosition(e.target);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        pos = getPosition(e.target);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      var spanEle = (eleP.childNodes)[7];</span><br><span class="line">      spanEle.innerText = pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //可编辑div获取坐标</span><br><span class="line">    const getDivPosition = function (element) &#123;</span><br><span class="line">      var caretOffset = 0;</span><br><span class="line">      var doc = element.ownerDocument || element.document;</span><br><span class="line">      var win = doc.defaultView || doc.parentWindow;</span><br><span class="line">      var sel;</span><br><span class="line">      if (typeof win.getSelection != &quot;undefined&quot;) &#123;//谷歌、火狐</span><br><span class="line">        sel = win.getSelection();</span><br><span class="line">        if (sel.rangeCount &gt; 0) &#123;//选中的区域</span><br><span class="line">          var range = win.getSelection().getRangeAt(0);</span><br><span class="line">          var preCaretRange = range.cloneRange();//克隆一个选中区域</span><br><span class="line">          preCaretRange.selectNodeContents(element);//设置选中区域的节点内容为当前节点</span><br><span class="line">          preCaretRange.setEnd(range.endContainer, range.endOffset);  //重置选中区域的结束位置</span><br><span class="line">          caretOffset = preCaretRange.toString().length;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else if ((sel = doc.selection) &amp;&amp; sel.type != &quot;Control&quot;) &#123;//IE</span><br><span class="line">        var textRange = sel.createRange();</span><br><span class="line">        var preCaretTextRange = doc.body.createTextRange();</span><br><span class="line">        preCaretTextRange.moveToElementText(element);</span><br><span class="line">        preCaretTextRange.setEndPoint(&quot;EndToEnd&quot;, textRange);</span><br><span class="line">        caretOffset = preCaretTextRange.text.length;</span><br><span class="line">      &#125;</span><br><span class="line">      return caretOffset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //输入框获取光标</span><br><span class="line">    const getPosition = function (element) &#123;</span><br><span class="line">      let cursorPos = 0;</span><br><span class="line">      if (document.selection) &#123;//IE</span><br><span class="line">        var selectRange = document.selection.createRange();</span><br><span class="line">        selectRange.moveStart(&apos;character&apos;, -element.value.length);</span><br><span class="line">        cursorPos = selectRange.text.length;</span><br><span class="line">      &#125; else if (element.selectionStart || element.selectionStart == &apos;0&apos;) &#123;</span><br><span class="line">        cursorPos = element.selectionStart;</span><br><span class="line">      &#125;</span><br><span class="line">      return cursorPos;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;label&gt;输入框测试:&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; style=&quot;width:220px&quot; onclick=&quot;getCursortPosition(event);&quot; /&gt;</span><br><span class="line">    &lt;span&gt;光标位置:&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;label&gt;文本框测试:&lt;/label&gt;</span><br><span class="line">    &lt;textarea rows=&quot;5&quot; style=&quot;width:220px&quot; onclick=&quot;getCursortPosition(event);&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;span&gt;光标位置:&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label&gt;可编辑div:&lt;/label&gt;</span><br><span class="line">    &lt;div contenteditable=&quot;true&quot; class=&quot;edit-div&quot; onclick=&quot;getCursortPosition(event);&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;span&gt;光标位置:&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;概念和原理&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;DOM中并没有直接获取光标位置的方法，那么我们只能间接来获取光标位置。DOM支持获取光标选中的范围，我们可以以此为切入点，来获取或定位光标的位置。当选取范围起始点和结束点一样时，就是光标插入的位置
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>初级前端必学</title>
    <link href="http://yoursite.com/2018/07/20/%E5%88%9D%E7%BA%A7%E5%89%8D%E7%AB%AF%E5%BF%85%E7%9F%A5/"/>
    <id>http://yoursite.com/2018/07/20/初级前端必知/</id>
    <published>2018-07-19T16:00:00.000Z</published>
    <updated>2018-11-28T04:35:17.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><blockquote><p>学习HTML的基础知识</p></blockquote><blockquote><p>HTML语法</p></blockquote><blockquote><p>将页面划分多个部分并正确构建</p></blockquote><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><blockquote><p>学习css的基础知识</p></blockquote><blockquote><p>Grid布局和Flexbox布局</p></blockquote><blockquote><p>响应式web设计和媒体查询</p></blockquote><h1 id="js基础"><a href="#js基础" class="headerlink" title="js基础"></a>js基础</h1><blockquote><p>语法和基本的操作</p></blockquote><blockquote><p>DOM操作</p></blockquote><blockquote><p>变量提升、事件冒泡、原型</p></blockquote><blockquote><p>AJAX（XHR）</p></blockquote><blockquote><p>ECMA Script 6+，学习新的特性</p></blockquote><blockquote><p>JQuery（可选）</p></blockquote><h1 id="常用开发技能"><a href="#常用开发技能" class="headerlink" title="常用开发技能"></a>常用开发技能</h1><blockquote><p>GIT - 版本控制（GitHub，Bitbucket，GitLab）</p></blockquote><blockquote><p>HTTP/HTTPs协议—–请求方式：GET  POST   PUT   PATCH   DELETE   OPTIONS</p></blockquote><blockquote><p>学会寻找解决方案</p></blockquote><blockquote><p>终端的使用</p></blockquote><blockquote><p>数据结构和算法</p></blockquote><blockquote><p>设计模式</p></blockquote><h1 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h1><ol><li>包管理器</li></ol><blockquote><p>npm（一定掌握）</p></blockquote><blockquote><p>yarn（最好掌握）</p></blockquote><blockquote><p>pnpm（可以掌握）</p></blockquote><ol start="2"><li>任务运行器</li></ol><blockquote><p>npm脚本（一定掌握）</p></blockquote><blockquote><p>gulp（可以掌握）</p></blockquote><ol start="3"><li>WebPack（一定掌握）</li><li>Roolup（可以掌握）</li><li>Parcel（可以掌握）</li></ol><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><ul><li>CSS预处理器</li></ul><blockquote><p>Sass/Css（一定掌握）</p></blockquote><blockquote><p>PostCSS（一定掌握）</p></blockquote><blockquote><p>Less（可以掌握）</p></blockquote><blockquote><p>Stylus（可以掌握）</p></blockquote><ul><li>CSS框架</li></ul><blockquote><p>BootStrap（最好掌握）</p></blockquote><blockquote><p>Materialize、Material UI、Material Design Lite（最好掌握）</p></blockquote><blockquote><p>Bulma（可以掌握）</p></blockquote><blockquote><p>Semantic UI（可以掌握）</p></blockquote><ul><li>CSS架构</li></ul><blockquote><p>BEM（一定掌握）</p></blockquote><blockquote><p>CSS Modules（最好掌握）</p></blockquote><blockquote><p>Atomic（可以掌握）</p></blockquote><blockquote><p>OOCSS（可以掌握）</p></blockquote><blockquote><p>SMACSS（可以掌握）</p></blockquote><blockquote><p>SUITCSS（可以掌握）</p></blockquote><ul><li>JS编写CSS</li></ul><blockquote><p>Styled Components（最好掌握）</p></blockquote><blockquote><p>Radium（最好掌握）</p></blockquote><blockquote><p>Emotion（最好掌握）</p></blockquote><blockquote><p>JSS（可以掌握）</p></blockquote><blockquote><p>Aphrodite（可以掌握）</p></blockquote><h1 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h1><ul><li>Mobx（最好掌握）</li><li>组件状态/上下文API（一定掌握）</li><li>Redux（一定掌握）</li></ul><ol><li>异步操作（side  Effects）</li></ol><blockquote><p>Redux Thunk（最好掌握）</p></blockquote><blockquote><p>Redux Better Promise（最好掌握）</p></blockquote><blockquote><p>Redux Sage（最好掌握）</p></blockquote><blockquote><p>Redux Observable（最好掌握）</p></blockquote><ol start="2"><li>数据持久化</li></ol><blockquote><p>Redux Persist（可以掌握）</p></blockquote><blockquote><p>Redux Phoenix（可以掌握）</p></blockquote><ol start="3"><li>Redux  Form（最好掌握）</li></ol><h1 id="类型检查器"><a href="#类型检查器" class="headerlink" title="类型检查器"></a>类型检查器</h1><blockquote><p>PropTypes（一定掌握）</p></blockquote><blockquote><p>TypeScript（最好掌握）</p></blockquote><blockquote><p>Flow（最好掌握）</p></blockquote><h1 id="表单助手"><a href="#表单助手" class="headerlink" title="表单助手"></a>表单助手</h1><blockquote><p>Redux Form（最好掌握）</p></blockquote><blockquote><p>Formik（最好掌握）</p></blockquote><blockquote><p>Formsy（可以掌握）</p></blockquote><blockquote><p>Final Form（可以掌握）</p></blockquote><h1 id="API客户端"><a href="#API客户端" class="headerlink" title="API客户端"></a>API客户端</h1><ul><li>REST</li></ul><blockquote><p>Fetch（一定掌握）</p></blockquote><blockquote><p>SuperAgent（最好掌握）</p></blockquote><blockquote><p>axios（最好掌握）</p></blockquote><ul><li>GraphQL</li></ul><blockquote><p>Apollo（最好掌握）</p></blockquote><blockquote><p>Relay（可以掌握）</p></blockquote><blockquote><p>urpl（可以掌握）</p></blockquote><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><blockquote><p>React-Router（一定掌握）</p></blockquote><blockquote><p>Routers（可以掌握）</p></blockquote><blockquote><p>Redux-First Router（可以掌握）</p></blockquote><blockquote><p>Reach Router（可以掌握）</p></blockquote><h1 id="使用工具库"><a href="#使用工具库" class="headerlink" title="使用工具库"></a>使用工具库</h1><blockquote><p>Lodash（一定掌握）</p></blockquote><blockquote><p>Moment（一定掌握）</p></blockquote><blockquote><p>classnames（一定掌握）</p></blockquote><blockquote><p>Numeral（最好掌握）</p></blockquote><blockquote><p>RxJS（最好掌握）</p></blockquote><blockquote><p>Ramda（可以掌握）</p></blockquote><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ol><li>单元测试</li></ol><blockquote><p>Jest（一定掌握）</p></blockquote><blockquote><p>Enzyme（一定掌握）</p></blockquote><blockquote><p>Sinon（一定掌握）</p></blockquote><blockquote><p>Mocha（最好掌握）</p></blockquote><blockquote><p>Chai（最好掌握）</p></blockquote><blockquote><p>AVA（可以掌握）</p></blockquote><blockquote><p>Tape（可以掌握）</p></blockquote><ol start="2"><li>端到端测试</li></ol><blockquote><p>Selenlum（最好掌握）</p></blockquote><blockquote><p>Cypress（最好掌握）</p></blockquote><blockquote><p>Puppeteer（最好掌握）</p></blockquote><blockquote><p>Cucumber.js（最好掌握）</p></blockquote><ol start="3"><li>集成测试</li></ol><blockquote><p>Karma（最好掌握）</p></blockquote><h1 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h1><blockquote><p>React Int（一定掌握）</p></blockquote><blockquote><p>React i 18 next（最好掌握）</p></blockquote><h1 id="服务端渲染（SSR）"><a href="#服务端渲染（SSR）" class="headerlink" title="服务端渲染（SSR）"></a>服务端渲染（SSR）</h1><blockquote><p>next.JS（最好掌握）</p></blockquote><blockquote><p>After.JS（可以掌握）</p></blockquote><h1 id="静态网站生成器"><a href="#静态网站生成器" class="headerlink" title="静态网站生成器"></a>静态网站生成器</h1><blockquote><p>Gatsby（最好掌握）</p></blockquote><h1 id="后端集成框架"><a href="#后端集成框架" class="headerlink" title="后端集成框架"></a>后端集成框架</h1><blockquote><p>React on Rails（可以掌握）</p></blockquote><h1 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h1><blockquote><p>React Native（可以掌握）</p></blockquote><blockquote><p>Cordova / Phonegap（可以掌握）</p></blockquote><h1 id="桌面端"><a href="#桌面端" class="headerlink" title="桌面端"></a>桌面端</h1><blockquote><p>Proton Native（可以掌握）</p></blockquote><blockquote><p>Electron（可以掌握）</p></blockquote><blockquote><p>React Native Windows（可以掌握）</p></blockquote><h1 id="虚拟现实-VR"><a href="#虚拟现实-VR" class="headerlink" title="虚拟现实(VR)"></a>虚拟现实(VR)</h1><blockquote><p>React 360（可以掌握）</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;学习HTML的基础知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;HTM
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ALL" scheme="http://yoursite.com/tags/ALL/"/>
    
  </entry>
  
  <entry>
    <title>硬连接和软连接</title>
    <link href="http://yoursite.com/2018/07/06/20180706-%E7%A1%AC%E8%BF%9E%E6%8E%A5%E5%92%8C%E8%BD%AF%E8%BF%9E%E6%8E%A5/"/>
    <id>http://yoursite.com/2018/07/06/20180706-硬连接和软连接/</id>
    <published>2018-07-05T16:00:00.000Z</published>
    <updated>2018-11-28T04:34:26.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Inode"><a href="#Inode" class="headerlink" title="Inode"></a>Inode</h1><ol><li>inode（即索引节点号）是Linux系统识别文件的唯一标识。</li><li>系统是通过inode来查找正确的文件数据块，并不是通过文件名。</li></ol><h4 id="Linux系统中文件数据分为两类：metadata（元数据）和data（普通数据）。"><a href="#Linux系统中文件数据分为两类：metadata（元数据）和data（普通数据）。" class="headerlink" title="Linux系统中文件数据分为两类：metadata（元数据）和data（普通数据）。"></a>Linux系统中文件数据分为两类：metadata（元数据）和data（普通数据）。</h4><p>元数据存放的是文件的附加属性，例如大小、时间戳、所有者等。普通数据才是真正的数据内容。</p><h1 id="硬链接和软链接"><a href="#硬链接和软链接" class="headerlink" title="硬链接和软链接"></a>硬链接和软链接</h1><p>在Linux系统为了解决文件共享问题，使用两种方式：hard link（硬链接）和soft link（软链接），链接不仅仅可以共享文件，还有方便管理、隐藏路径、节省空间等好处。</p><h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><h3 id="若是使用同一个inode对应多个文件，则使用的就是硬链接。"><a href="#若是使用同一个inode对应多个文件，则使用的就是硬链接。" class="headerlink" title="若是使用同一个inode对应多个文件，则使用的就是硬链接。"></a>若是使用同一个inode对应多个文件，则使用的就是硬链接。</h3><p>硬链接可以使用link和ln创建</p><p>语法：ln filename [linkname ]</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">link data link</span><br><span class="line">ln data link</span><br></pre></td></tr></table></figure><ol><li>只能和已存在的文件建立硬链接</li></ol><h4 id="我们在-app目录下进行实验，当硬链接的源文件不存在时，硬链接无法创建"><a href="#我们在-app目录下进行实验，当硬链接的源文件不存在时，硬链接无法创建" class="headerlink" title="我们在/app目录下进行实验，当硬链接的源文件不存在时，硬链接无法创建"></a>我们在/app目录下进行实验，当硬链接的源文件不存在时，硬链接无法创建</h4><ol start="2"><li>文件的inode相同和文件属性，只是文件名不同</li></ol><h4 id="我们在-app目录下创建一个data的源文件，并通过stat-命令查看文件属性，然后创建硬链接link，ll-i-查看两者的inode相同，从ctime的变化也能确定硬链接就是用一个文件"><a href="#我们在-app目录下创建一个data的源文件，并通过stat-命令查看文件属性，然后创建硬链接link，ll-i-查看两者的inode相同，从ctime的变化也能确定硬链接就是用一个文件" class="headerlink" title="我们在/app目录下创建一个data的源文件，并通过stat 命令查看文件属性，然后创建硬链接link，ll -i 查看两者的inode相同，从ctime的变化也能确定硬链接就是用一个文件"></a>我们在/app目录下创建一个data的源文件，并通过stat 命令查看文件属性，然后创建硬链接link，ll -i 查看两者的inode相同，从ctime的变化也能确定硬链接就是用一个文件</h4><ol start="3"><li>不能跨文件系统建立硬链接</li></ol><h4 id="在-dev目录下建立硬链接link，因为所在不同的文件系统，所以不能建立硬链接"><a href="#在-dev目录下建立硬链接link，因为所在不同的文件系统，所以不能建立硬链接" class="headerlink" title="在/dev目录下建立硬链接link，因为所在不同的文件系统，所以不能建立硬链接"></a>在/dev目录下建立硬链接link，因为所在不同的文件系统，所以不能建立硬链接</h4><ol start="4"><li>硬链接创建后链接数会增加</li></ol><h4 id="我们通过对link和data建立新的硬链接link2和link3，发现链数都有增长，由此也能看出硬链接实质上就是同一个文件"><a href="#我们通过对link和data建立新的硬链接link2和link3，发现链数都有增长，由此也能看出硬链接实质上就是同一个文件" class="headerlink" title="我们通过对link和data建立新的硬链接link2和link3，发现链数都有增长，由此也能看出硬链接实质上就是同一个文件"></a>我们通过对link和data建立新的硬链接link2和link3，发现链数都有增长，由此也能看出硬链接实质上就是同一个文件</h4><ol start="5"><li>不能对目录创建硬链接</li></ol><h4 id="在-app目录下创建dir1目录文件，尝试建立硬链接link4，创建失败。因为硬链接能针对目录创建"><a href="#在-app目录下创建dir1目录文件，尝试建立硬链接link4，创建失败。因为硬链接能针对目录创建" class="headerlink" title="在/app目录下创建dir1目录文件，尝试建立硬链接link4，创建失败。因为硬链接能针对目录创建"></a>在/app目录下创建dir1目录文件，尝试建立硬链接link4，创建失败。因为硬链接能针对目录创建</h4><ol start="6"><li>删除一个硬链接文件并不影响其他有相同 inode 号的文件数据</li></ol><h4 id="在删除源文件data的之前，查看源文件和链接文件的数据是一致的。在删除data之后，其他的硬链接文件的内容不受影响，只是链接数减少了"><a href="#在删除源文件data的之前，查看源文件和链接文件的数据是一致的。在删除data之后，其他的硬链接文件的内容不受影响，只是链接数减少了" class="headerlink" title="在删除源文件data的之前，查看源文件和链接文件的数据是一致的。在删除data之后，其他的硬链接文件的内容不受影响，只是链接数减少了"></a>在删除源文件data的之前，查看源文件和链接文件的数据是一致的。在删除data之后，其他的硬链接文件的内容不受影响，只是链接数减少了</h4><h1 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h1><h2 id="软链接的特性"><a href="#软链接的特性" class="headerlink" title="软链接的特性"></a>软链接的特性</h2><ol><li><p>软链接其实存放的就是源文件的路径，所以如果文件的内容数据是另一个文件的路径时，这个文件就是软链接。</p></li><li><p>软链接有自己独立的inode和文件属性，这点和硬链接有本质的区别</p></li></ol><p>语法：ln -s filename [linkname ]</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">link -s data link</span><br><span class="line">ln -s data link</span><br></pre></td></tr></table></figure><ol><li>软链接可对不存在文件建立链接</li></ol><h4 id="在-app的空目录中，建立软链接，目录下没有文件，但链接依旧能建立，找不到目标文件会有报错提示"><a href="#在-app的空目录中，建立软链接，目录下没有文件，但链接依旧能建立，找不到目标文件会有报错提示" class="headerlink" title="在/app的空目录中，建立软链接，目录下没有文件，但链接依旧能建立，找不到目标文件会有报错提示"></a>在/app的空目录中，建立软链接，目录下没有文件，但链接依旧能建立，找不到目标文件会有报错提示</h4><ol start="2"><li>软链接有自己的inode和属性</li></ol><h4 id="在目录下建立文件soft，之后对soft设置软链接slink，通过stat-命令查看soft和slink的文件属性，可以看出和之前硬链接的本质区别，不论是权限、inode、时间戳、大小、数据块都不同"><a href="#在目录下建立文件soft，之后对soft设置软链接slink，通过stat-命令查看soft和slink的文件属性，可以看出和之前硬链接的本质区别，不论是权限、inode、时间戳、大小、数据块都不同" class="headerlink" title="在目录下建立文件soft，之后对soft设置软链接slink，通过stat 命令查看soft和slink的文件属性，可以看出和之前硬链接的本质区别，不论是权限、inode、时间戳、大小、数据块都不同"></a>在目录下建立文件soft，之后对soft设置软链接slink，通过stat 命令查看soft和slink的文件属性，可以看出和之前硬链接的本质区别，不论是权限、inode、时间戳、大小、数据块都不同</h4><ol start="3"><li>软链接可跨文件系统建立</li></ol><h4 id="在-dev目录下建立test文件目录用于实验，然后设置软链接testlink"><a href="#在-dev目录下建立test文件目录用于实验，然后设置软链接testlink" class="headerlink" title="在/dev目录下建立test文件目录用于实验，然后设置软链接testlink"></a>在/dev目录下建立test文件目录用于实验，然后设置软链接testlink</h4><ol start="4"><li>软链接可以对目录文件建立</li></ol><h4 id="接着直接以-app-testdir为目标文件，和-dev-test目录文件，建立软链接"><a href="#接着直接以-app-testdir为目标文件，和-dev-test目录文件，建立软链接" class="headerlink" title="接着直接以/app/testdir为目标文件，和/dev/test目录文件，建立软链接"></a>接着直接以/app/testdir为目标文件，和/dev/test目录文件，建立软链接</h4><ol start="5"><li>软链接创建不会增加链接数</li></ol><h4 id="建立了软链接，而链接数还是1没有改变"><a href="#建立了软链接，而链接数还是1没有改变" class="headerlink" title="建立了软链接，而链接数还是1没有改变"></a>建立了软链接，而链接数还是1没有改变</h4><ol start="6"><li>删除软链接并不影响源文件，但删除源文件软链接就会变成死链接，若链接指向的路径文件被重新建立，则链接恢复</li></ol><h4 id="在-app目录下再创创建一个软链接slink2，在我们删除slink之后，源文件soft和slink2都没有受到影响，但当我们把soft文件删除后，slink2就变成了死链接，不再能显示数据"><a href="#在-app目录下再创创建一个软链接slink2，在我们删除slink之后，源文件soft和slink2都没有受到影响，但当我们把soft文件删除后，slink2就变成了死链接，不再能显示数据" class="headerlink" title="在/app目录下再创创建一个软链接slink2，在我们删除slink之后，源文件soft和slink2都没有受到影响，但当我们把soft文件删除后，slink2就变成了死链接，不再能显示数据"></a>在/app目录下再创创建一个软链接slink2，在我们删除slink之后，源文件soft和slink2都没有受到影响，但当我们把soft文件删除后，slink2就变成了死链接，不再能显示数据</h4><h2 id="其他相关命令"><a href="#其他相关命令" class="headerlink" title="其他相关命令"></a>其他相关命令</h2><p>使用find 命令可以查找链接文件</p><ol><li>查找目录文件下相同inode的文件</li></ol><h4 id="find-dirs-inum-inode"><a href="#find-dirs-inum-inode" class="headerlink" title="find /dirs inum inode"></a>find /dirs inum inode</h4><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>硬链接本质上就是同一个文件的不同文件名。软链接就是独立的文件，不过文件中存放的是源文件的路径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Inode&quot;&gt;&lt;a href=&quot;#Inode&quot; class=&quot;headerlink&quot; title=&quot;Inode&quot;&gt;&lt;/a&gt;Inode&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;inode（即索引节点号）是Linux系统识别文件的唯一标识。&lt;/li&gt;
&lt;li&gt;系统是通过inode来
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="文件系统" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>箭头函数</title>
    <link href="http://yoursite.com/2018/07/06/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/07/06/箭头函数/</id>
    <published>2018-07-05T16:00:00.000Z</published>
    <updated>2018-11-28T04:35:27.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="箭头函数没有arugments"><a href="#箭头函数没有arugments" class="headerlink" title="箭头函数没有arugments"></a>箭头函数没有arugments</h2><p>普通函数有arguments</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function a()&#123; console.log(arguments) &#125;</span><br><span class="line">a(1,2,3)</span><br><span class="line"></span><br><span class="line">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br></pre></td></tr></table></figure><p>箭头函数才有 arguments</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = ()=&gt;&#123; console.log(arguments) &#125;</span><br><span class="line">b(1,2,3)</span><br><span class="line">// VM13852:1 Uncaught ReferenceError: arguments is not defined</span><br></pre></td></tr></table></figure><h2 id="箭头函数的this为定义时的环境"><a href="#箭头函数的this为定义时的环境" class="headerlink" title="箭头函数的this为定义时的环境"></a>箭头函数的this为定义时的环境</h2><p>函数定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="params">()</span>=&gt;</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;</span><br></pre></td></tr></table></figure><p>真实函数定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>( <span class="built_in">window</span> )&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="params">()</span>=&gt;</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 箭头函数原理</span></span><br><span class="line">    <span class="keyword">var</span> c = <span class="function">(<span class="params"> (v</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">        &#125;.bind( v )</span><br><span class="line"></span><br><span class="line">    &#125; )( <span class="keyword">this</span> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a;</span><br><span class="line"><span class="comment">// ƒ a()&#123; console.log(this) &#125;</span></span><br><span class="line">b;</span><br><span class="line"><span class="comment">// ()=&gt;&#123; console.log(this) &#125;</span></span><br></pre></td></tr></table></figure><p>执行返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a()</span><br><span class="line"><span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …&#125;</span></span><br><span class="line"></span><br><span class="line">b()</span><br><span class="line"><span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …&#125;</span></span><br></pre></td></tr></table></figure><p>其他对象调用返回<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;&#125;</span><br><span class="line">obj.name = <span class="string">'myObj'</span>;</span><br><span class="line">obj.fa = a;</span><br><span class="line">obj.fb = b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj.fa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;fa: ƒ, name: "myObj", fb: ƒ&#125;</span></span><br><span class="line">obj.fb();</span><br><span class="line"><span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …&#125;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;箭头函数没有arugments&quot;&gt;&lt;a href=&quot;#箭头函数没有arugments&quot; class=&quot;headerlink&quot; title=&quot;箭头函数没有arugments&quot;&gt;&lt;/a&gt;箭头函数没有arugments&lt;/h2&gt;&lt;p&gt;普通函数有arguments&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>前端求职面试问题</title>
    <link href="http://yoursite.com/2018/07/05/20180705-%E5%BC%80%E6%BA%90%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/07/05/20180705-开源前端面试题/</id>
    <published>2018-07-04T16:00:00.000Z</published>
    <updated>2018-11-28T04:34:22.487Z</updated>
    
    <content type="html"><![CDATA[<p>( 前端求职面试问题 )</p><h1 id="Front-end-Job-Interview-Questions"><a href="#Front-end-Job-Interview-Questions" class="headerlink" title="Front-end Job Interview Questions"></a>Front-end Job Interview Questions</h1><h2 id="Table-of-Contents-目录表"><a href="#Table-of-Contents-目录表" class="headerlink" title="Table of Contents( 目录表 )"></a>Table of Contents( 目录表 )</h2><ol><li>General Questions   （ 一般的问题 ）</li><li>HTML Questions       ( HTML问题 )</li><li>CSS Questions        ( CSS问题 )</li><li>JS Questions         ( JS问题 )</li><li>Network Questions    ( 网络问题 )</li><li>Coding Questions     ( 代码问题 )</li><li>Fun Questions        ( 有趣的问题 )</li></ol><hr><h3 id="General-Questions"><a href="#General-Questions" class="headerlink" title="General Questions"></a>General Questions</h3><ul><li>What did you learn yesterday/this week?<blockquote><p>昨天或者说这个星期你学到了什么？</p></blockquote></li><li>What excites or interests you about coding?<blockquote><p>你对代码感兴趣吗？</p></blockquote></li><li>What is a recent technical challenge you experienced and how did you solve it?<blockquote><p>你最近遇到的技术挑战是什么?你是如何解决的？</p></blockquote></li><li>What UI, Security, Performance, SEO, Maintainability or Technology considerations do you make while building a web application or site?<blockquote><p>在构建web应用程序或站点时，你会做哪些UI，安全性，性能，SEO，可维护性或技术方面的考虑</p></blockquote></li><li>Talk about your preferred development environment.<blockquote><p>谈谈你喜欢的开发环境</p></blockquote></li><li>Which version control systems are you familiar with?<blockquote><p>你熟悉哪些版本控制系统  </p></blockquote></li><li>Can you describe your workflow when you create a web page?<blockquote><p>当你创建网页时，能描述你的工作流程吗？</p></blockquote></li><li>If you have 5 different stylesheets, how would you best integrate them into the site?<blockquote><p>如果你有5个不同的样式表，你如何将它们最好的集成到站点中？</p></blockquote></li><li>Can you describe the difference between progressive enhancement and graceful degradation?<blockquote><p>你能描述渐进增强和优雅退化的区别吗？</p></blockquote></li><li>How would you optimize a website’s assets/resources?<blockquote><p>如何优化你的站点资源</p></blockquote></li><li>How many resources will a browser download from a given domain at a time?<blockquote><p>一次有多少资源将会被从一个给定的域下载</p></blockquote></li><li>What are the exceptions?<blockquote><p>将会有什么异常</p></blockquote></li><li>Name 3 ways to decrease page load (perceived or actual load time).<blockquote><p>列出3种减少页面</p></blockquote></li><li>If you jumped on a project and they used tabs and you used spaces, what would you do?<blockquote><p> 如果你临时加入一个项目，他们用Tabs你使用spaces，你会怎么做</p></blockquote></li><li>Describe how you would create a simple slideshow page.<blockquote><p> 描述如何创建一个简单的幻灯片页面？</p></blockquote></li><li>If you could master one technology this year, what would it be?<blockquote><p> 如果今年你能掌握一项技术，会是什么？</p></blockquote></li><li>Explain the importance of standards and standards bodies.<blockquote><p> 解释标准和标准机构的重要性  </p></blockquote></li><li>What is Flash of Unstyled Content? How do you avoid FOUC?<blockquote><p> 什么是无格式内容的Flash？如何避免犯规？</p></blockquote></li><li><p>Explain what ARIA（Accessible Rich Internet Applications ） and screenreaders are, and how to make a website accessible.</p><blockquote><p>解释下什么是ARIA和screenreaders，并且如何建立一个可用性站点</p></blockquote></li><li><p>Explain some of the pros and cons for CSS animations versus JavaScript animations.</p><blockquote><p> 解释CSS动画和Javascript动画的利弊？</p></blockquote></li></ul><hr><h3 id="HTML-Questions"><a href="#HTML-Questions" class="headerlink" title="HTML Questions:"></a>HTML Questions:</h3><ul><li>What does a doctype do?<blockquote><p>DOCTYPE是做什么的？</p></blockquote></li><li>What’s the difference between standards mode and quirks mode?<blockquote><p> 标准和模型和怪癖盒模型有什么不同  </p></blockquote></li><li>What’s the difference between HTML and XHTML?<blockquote><p>HTML和XHTML之间的不同</p></blockquote></li><li>Are there any problems with serving pages as application/xhtml+xml?<blockquote><p> 服务页面作为应用程序，XHTML+XML有什么问题</p></blockquote></li><li>How do you serve a page with content in multiple languages?<blockquote><p> 如何使用多语言的内容服务页面</p></blockquote></li><li>What kind of things must you be wary of when design or developing for multilingual sites?<blockquote><p> 当设计或开发多语言网站时，你必须谨防什么样的事情？</p></blockquote></li><li>What are data- attributes good for?<blockquote><p> 数据类型有什么用？</p></blockquote></li><li>Consider HTML5 as an open web platform. What are the building blocks of HTML5?<blockquote><p> 将HTML5视为一个开放的web平台，HTML5的组成部分是什么？</p></blockquote></li><li>Describe the difference between a cookie, sessionStorage and localStorage.<blockquote><p> 描述一下cookie，sessionStorage和localStorage之间的区别</p></blockquote></li><li>Describe the difference between <script>, <script async> and <script defer>.<blockquote><p> 描述一下<script>,<script async>和<script defer>之间的不同？</p></blockquote></li><li>Why is it generally a good idea to position CSS <link>s between <head></head> and JS <script>s just before </body>? Do you know any exceptions?<blockquote><p> 为什么css的<link>标签要在head标签内，JS的<script>标签在<body>标签之前，你知道什么情况下例外？</p></blockquote></li><li>What is progressive rendering?<blockquote><p> 什么是渐进式渲染？</p></blockquote></li><li>Have you used different HTML templating languages before?<blockquote><p> 你之前使用过不同的HTML的模板语言吗？</p></blockquote></li></ul><hr><h3 id="CSS-Questions"><a href="#CSS-Questions" class="headerlink" title="CSS Questions:"></a>CSS Questions:</h3><ul><li>What is the difference between classes and ID’s in CSS?</li><li>id选择器与class选择器的不同</li><li>What’s the difference between “resetting” and “normalizing” CSS? Which would you choose, and why?<blockquote><p> 重置和标准化css有什么区别？你会选哪一个？为什么？</p></blockquote></li><li>Describe Floats and how they work.<blockquote><p> 描述浮动一级它是如何工作的？</p></blockquote></li><li>Describe z-index and how stacking context is formed.<blockquote><p>描述一下z-index和它是如何与其他的元素堆叠在一起的</p></blockquote></li><li>Describe BFC(Block Formatting Context) and how it works.<blockquote><p> 描述下BFC（块级格式化上下文）以及其工作原理？</p></blockquote></li><li>What are the various clearing techniques and which is appropriate for what context?<blockquote><p> 什么是各种结算技术，都是用于什么背景？</p></blockquote></li><li>Explain CSS sprites, and how you would implement them on a page or site.<blockquote><p> 解释CSS sprites，以及如何在页面或站点上实现它们？</p></blockquote></li><li>What are your favourite image replacement techniques and which do you use when?<blockquote><p> 你最喜欢的图像替换技术是什么？你会什么时候使用？</p></blockquote></li><li>How would you approach fixing browser-specific styling issues?<blockquote><p> 如何解决浏览器特定的样式问题？</p></blockquote></li><li>How do you serve your pages for feature-constrained browsers?<blockquote><p>如何为你的页面提供浏览器受限制的特性</p></blockquote></li></ul><ul><li>What techniques/processes do you use?<blockquote><p> 你使用的是什么技术，以及过程？</p></blockquote></li><li>What are the different ways to visually hide content (and make it available only for screen readers)?<blockquote><p> 有什么不同的方式来直观地隐藏内容（并使其仅适用于屏幕阅读器）？</p></blockquote></li><li>Have you ever used a grid system, and if so, what do you prefer?<blockquote><p> 你有没有用过栅格系统，有过有，你喜欢它什么？</p></blockquote></li><li>Have you used or implemented media queries or mobile specific layouts/CSS?<blockquote><p> 您使用或实现了媒体查询或移动特定布局</p></blockquote></li><li>Are you familiar with styling SVG?<blockquote><p> 你熟悉SVG样式吗？</p></blockquote></li><li>How do you optimize your webpages for print?<blockquote><p> 如何优化网页打印？</p></blockquote></li><li>What are some of the “gotchas” for writing efficient CSS?<blockquote><p> 什么是编写高效CSS的“窍门”？</p></blockquote></li><li>What are the advantages/disadvantages of using CSS preprocessors?<blockquote><p> 使用CSS预处理器的优点和缺点是什么？</p></blockquote></li><li>Describe what you like and dislike about the CSS preprocessors you have used.<blockquote><p> 描述你喜欢和不喜欢你使用的CSS预处理器。</p></blockquote></li><li>How would you implement a web design comp that uses non-standard fonts?<blockquote><p> 如何实现使用非标准字体的Web设计COMP？</p></blockquote></li><li>Explain how a browser determines what elements match a CSS selector.<blockquote><p> 解释浏览器如何确定哪些元素与CSS选择器匹配。</p></blockquote></li><li>Describe pseudo-elements and discuss what they are used for.<blockquote><p> 描述伪元素并讨论它们的用途。</p></blockquote></li><li>Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.<blockquote><p> 解释您对模型的理解，以及如何告诉CSS中的浏览器在不同的盒模型中呈现布局。</p></blockquote></li><li>What does * { box-sizing: border-box; } do? What are its advantages?<blockquote><p> { box-sizing: border-box; }是做什么的？它的有点是什么</p></blockquote></li><li>List as many values for the display property that you can remember.<blockquote><p> 尽可能的列出你记住的display的属性值</p></blockquote></li><li>What’s the difference between inline and inline-block?</li><li>inline与inline-block之间的不同</li><li>What’s the difference between a relative, fixed, absolute and statically positioned element?</li><li>relative，fixed，absoult，和statically这些定位元素之间的不同</li><li>The ‘C’ in CSS stands for Cascading. How is priority determined in assigning styles (a few examples)? How can you use this system to your advantage?</li><li>CSS中的“C”代表级联。如何在分配样式中确定优先级（几个例子）？你如何利用这个系统来发挥你的优势？</li><li>What existing CSS frameworks have you used locally, or in production? How would you change/improve them?<blockquote><p> 现有的CSS框架在本地或生产中使用过吗？你将如何改变/改进它们？</p></blockquote></li><li>Have you played around with the new CSS Flexbox or Grid specs?<blockquote><p> 你使用过新的Flexbox或Grid specs？</p></blockquote></li><li>How is responsive design different from adaptive design?<blockquote><p> 为什么响应设计和适应设计不同？</p></blockquote></li><li>Have you ever worked with retina graphics? If so, when and what techniques did you use?<blockquote><p> 你曾经使用视网膜图形吗？如果是的话，你使用什么技术？</p></blockquote></li><li>Is there any reason you’d want to use translate() instead of absolute positioning, or vice-versa? And why?<blockquote><p> 在什么情况下你想使用translate()代替定位，反之亦然？为什么？</p></blockquote></li></ul><hr><h3 id="JS-Questions"><a href="#JS-Questions" class="headerlink" title="JS Questions:"></a>JS Questions:</h3><ul><li>Explain event delegation<blockquote><p> 解释事件委托</p></blockquote></li><li>Explain how this works in JavaScript<blockquote><p> 解释如何在JavaScript中工作</p></blockquote></li><li>Explain how prototypal inheritance works<blockquote><p> 解释原型继承是如何工作的</p></blockquote></li><li>What do you think of AMD vs CommonJS?<blockquote><p> 你认为AMD和CommonJS那个更好</p></blockquote></li><li>Explain why the following doesn’t work as an IIFE: function foo(){ }();.<blockquote><p> 解释下面的函数不工作作为一个IIFE：function foo(){}()</p></blockquote></li><li>What needs to be changed to properly make it an IIFE?<blockquote><p> 需要改变什么才能使之成为IFIE？</p></blockquote></li><li>What’s the difference between a variable that is: null, undefined or undeclared?<blockquote><p> 变量是空的、未定义的或未声明的变量之间的区别是什么？</p></blockquote></li><li>How would you go about checking for any of these states?<blockquote><p> 你会怎么去检查这些变量</p></blockquote></li><li>What is a closure, and how/why would you use one?<blockquote><p> 什么是闭包，以及如何/为什么要使用？</p></blockquote></li><li>What’s a typical use case for anonymous functions?<blockquote><p> 匿名函数的典型用例是什么？</p></blockquote></li><li>How do you organize your code? (module pattern, classical inheritance?)<blockquote><p> 如何组织代码？（模块模式，经典继承？）</p></blockquote></li><li>What’s the difference between host objects and native objects?<blockquote><p> 主机对象和本地对象有什么区别？</p></blockquote></li><li>Difference between: function Person(){}, var person = Person(), and var person = new Person()?<blockquote><p> 这三个函数之间的区别</p></blockquote></li><li>What’s the difference between .call and .apply?</li><li>call和apply之间的区别？</li><li>Explain Function.prototype.bind.<blockquote><p> 解释一下 Function.prototype.bind.</p></blockquote></li><li>When would you use document.write()?<blockquote><p> 你什么时候会使用document.write()？</p></blockquote></li><li>What’s the difference between feature detection, feature inference, and using the UA string?<blockquote><p> 特性检查，特性推断和UA字符串之间的不同？</p></blockquote></li><li>Explain AJAX in as much detail as possible.<blockquote><p> 尽可能详细的解释AJAX</p></blockquote></li><li>Explain how JSONP works (and how it’s not really AJAX).<blockquote><p> 解释一下JSONP是如何工作的（和为什么他不是AJAX）</p></blockquote></li><li>Have you ever used JavaScript templating?<blockquote><p> 你曾经使用过JavaScript模板吗？</p></blockquote></li><li>If so, what libraries have you used?<blockquote><p> 如果是这样的话，你有用过什么库吗？</p></blockquote></li><li>Explain “hoisting”.<blockquote><p> 解释一下‘hosting’</p></blockquote></li><li>Describe event bubbling.<blockquote><p> 描述一下冒泡事件？</p></blockquote></li><li>What’s the difference between an “attribute” and a “property”?<blockquote><p> “attribute” 和 “property”?之间的区别？</p></blockquote></li><li>Why is extending built-in JavaScript objects not a good idea?<blockquote><p> 为什么继承在JavaScript对象中使用不适合？</p></blockquote></li><li>Difference between document load event and document ready event?<blockquote><p> 文档加载事件与文档准备事件的区别？</p></blockquote></li><li>What is the difference between == and ===?<blockquote><p> == 和 === 之间的不同？</p></blockquote></li><li>Explain the same-origin policy with regards to JavaScript.<blockquote><p> 解释关于JavaScript的同源策略。</p></blockquote></li><li>Make this work:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">duplicate([1,2,3,4,5]); // [1,2,3,4,5,1,2,3,4,5]</span><br></pre></td></tr></table></figure><ul><li>Why is it called a Ternary expression, what does the word “Ternary” indicate?<blockquote><p> 为什么它被称为三元表达式，“三元”这个词表示什么？</p></blockquote></li><li>What is “use strict”;? what are the advantages and disadvantages to using it?<blockquote></blockquote></li><li>Create a for loop that iterates up to 100 while outputting “fizz” at multiples of 3, “buzz” at multiples of 5 and “fizzbuzz” at multiples of 3 and 5</li><li>Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?</li><li>Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?</li><li>Explain what a single page app is and how to make one SEO-friendly.</li><li>What is the extent of your experience with Promises and/or their polyfills?</li><li>What are the pros and cons of using Promises instead of callbacks?</li><li>What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?</li></ul><hr><h3 id="Testing-Questions"><a href="#Testing-Questions" class="headerlink" title="Testing Questions:"></a>Testing Questions:</h3><ul><li>What are some advantages/disadvantages to testing your code?<blockquote><p> 测试代码有哪些优点/缺点？</p></blockquote></li><li>What tools would you use to test your code’s functionality?<blockquote><p> 你会用什么工具来测试你的代码的功能？</p></blockquote></li><li>What is the difference between a unit test and a functional/integration test?<blockquote><p> 单元测试一个功能和集成测试之间的区别是什么？</p></blockquote></li><li>What is the purpose of a code style linting tool?<blockquote><p> 规范代码的风格的工具的目的是什么？</p></blockquote></li></ul><hr><h3 id="Performance-Questions"><a href="#Performance-Questions" class="headerlink" title="Performance Questions:"></a>Performance Questions:</h3><ul><li>What tools would you use to find a performance bug in your code?<blockquote><p> 你用什么工具来找到代码中的性能缺陷？</p></blockquote></li><li>What are some ways you may improve your website’s scrolling performance?<blockquote><p> 你有什么方法可以提高你的网站的滚动性能？</p></blockquote></li><li>Explain the difference between layout, painting and compositing.<blockquote><p> 解释一下layout，painting，compositing之间的区别?</p></blockquote></li></ul><hr><h3 id="Network-Questions"><a href="#Network-Questions" class="headerlink" title="Network Questions:"></a>Network Questions:</h3><ul><li>Traditionally, why has it been better to serve site assets from multiple domains?<blockquote><p> 传统上，为什么可以更好地为来自多个域的站点资产提供服务？</p></blockquote></li><li>Do your best to describe the process from the time you type in a website’s URL to it finishing loading on your screen.<blockquote><p> 尽你所能描述从你输入一个网站的URL到它完成你的屏幕上的加载的过程。</p></blockquote></li><li>What are the differences between Long-Polling, Websockets and Server-Sent Events?</li><li><p>Long-Polling，Websockets和Server-Sent Events之间的不同？</p></li><li><p>Explain the following request and response headers:</p></li><li>Diff. between Expires, Date, Age and If-Modified-…</li><li>Do Not Track</li><li>Cache-Control</li><li>Transfer-Encoding</li><li>ETag</li><li>X-Frame-Options</li></ul><blockquote><p>解释以下response和request的头信息</p></blockquote><ul><li>What are HTTP actions? List all HTTP actions that you know, and explain them.<blockquote><p> 什么是http请求？列出你所知道的http请求并解释它们</p></blockquote></li></ul><hr><h3 id="Coding-Questions"><a href="#Coding-Questions" class="headerlink" title="Coding Questions:"></a>Coding Questions:</h3><p>Question: What is the value of foo?</p><ul><li>foo的值为多少<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var foo = 10 + &apos;20&apos;;</span><br></pre></td></tr></table></figure></li></ul><p>Question: How would you make this work?</p><blockquote><p> 你怎么做这个工作？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(2, 5); // 7</span><br><span class="line">add(2)(5); // 7</span><br></pre></td></tr></table></figure><p>Question: What value is returned from the following statement?</p><blockquote><p> 下面的语句返回什么值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;i&apos;m a lasagna hog&quot;.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br></pre></td></tr></table></figure><p>Question: What is the value of window.foo?</p><ul><li>window.foo的值为什么？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( window.foo || ( window.foo = &quot;bar&quot; ) );</span><br></pre></td></tr></table></figure><p>Question: What is the outcome of the two alerts below?</p><blockquote><p> 下面两个函数分别会弹出什么结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var foo = &quot;Hello&quot;;</span><br><span class="line">(function() &#123;</span><br><span class="line">var bar = &quot; World&quot;;</span><br><span class="line">alert(foo + bar);</span><br><span class="line">&#125;)();</span><br><span class="line">alert(foo + bar);</span><br></pre></td></tr></table></figure><p>Question: What is the value of foo.length?</p><ul><li>foo.length的值是什么</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var foo = [];</span><br><span class="line">foo.push(1);</span><br><span class="line">foo.push(2);</span><br></pre></td></tr></table></figure><p>Question: What is the value of foo.x?</p><ul><li>foo.x的结果是什么</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var foo = &#123;n: 1&#125;;</span><br><span class="line">var bar = foo;</span><br><span class="line">foo.x = foo = &#123;n: 2&#125;;</span><br></pre></td></tr></table></figure><h3 id="Fun-Questions"><a href="#Fun-Questions" class="headerlink" title="Fun Questions:"></a>Fun Questions:</h3><ul><li>What’s a cool project that you’ve recently worked on?<br>*你最近有没有做什么很酷的项目</li><li>What are some things you like about the developer tools you use?<blockquote><p> 你喜欢哪些开发工具？</p></blockquote></li><li>Do you have any pet projects? What kind?<blockquote><p> 你有很喜欢的项目吗？什么样的？</p></blockquote></li><li>What’s your favorite feature of Internet Explorer?<blockquote><p> 你最喜欢的Internet Explorer的特性是什么？</p></blockquote></li><li>How do you like your coffee?<blockquote><p> 你喜欢喝什么样的咖啡？</p></blockquote></li></ul></script></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;( 前端求职面试问题 )&lt;/p&gt;
&lt;h1 id=&quot;Front-end-Job-Interview-Questions&quot;&gt;&lt;a href=&quot;#Front-end-Job-Interview-Questions&quot; class=&quot;headerlink&quot; title=&quot;Front-
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
</feed>
