<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>js获取光标位置</title>
      <link href="/2017/11/01/node%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E5%B7%A5%E5%85%B7/"/>
      <url>/2017/11/01/node%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h2 id="Node自动重启工具-nodemon"><a href="#Node自动重启工具-nodemon" class="headerlink" title="Node自动重启工具 nodemon"></a>Node自动重启工具 nodemon</h2><h3 id="为什么要使用"><a href="#为什么要使用" class="headerlink" title="为什么要使用"></a>为什么要使用</h3><p>在编写调试Node.js项目，修改代码后，需要频繁的手动close掉，然后再重新启动，非常繁琐。现在，我们可以使用nodemon这个工具，它的作用是监听代码文件的变动，当代码改变之后，自动重启。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm/cnpm install -g nodemon</span><br></pre></td></tr></table></figure><p>安装在全局。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>编写代码 app.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&quot;express&quot;)</span><br><span class="line"></span><br><span class="line">var app = express()</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;,function(req,res) &#123;</span><br><span class="line">    res.send(&quot;hello world&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000,function()&#123;</span><br><span class="line">    console.log(&apos;server is running&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里使用了express框架。</p><p>传统的方法，我们使用node app.js命令，程序将启动。其实，我们刚才下载的nodemon工具也可以用来启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure><p>我们访问3000端口，可以看到hellloworld。</p><p>我们现在尝试修改一下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/&apos;,function(req,res) &#123;</span><br><span class="line">    res.send(&quot;hello 杨古波&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>保存之后，我们可以看到命令行中，输出了以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[nodemon] restarting due to changes...</span><br><span class="line">[nodemon] starting `node app.js`</span><br></pre></td></tr></table></figure><p>我们只需要刷新浏览器，就可以看到改动后的内容。</p>]]></content>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Promise 的基础用法</title>
      <link href="/2017/10/31/Promise%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2017/10/31/Promise%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="Promise-的基础用法"><a href="#Promise-的基础用法" class="headerlink" title="Promise 的基础用法"></a>Promise 的基础用法</h2><h3 id="Promise-的含义"><a href="#Promise-的含义" class="headerlink" title="Promise 的含义"></a>Promise 的含义</h3><p>Promise 是异步编程的一种解决方案，比传统的解决方案–回调函数和事件－－更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了语法，原生提供了Promise</p><p>所谓Promise ，简单说就是一个容器，里面保存着某个未来才回结束的事件(通常是一个异步操作）的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。<br>Promise 对象的状态不受外界影响</p><h3 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态:"></a>三种状态:</h3><ul><li>pending：进行中</li><li>fulfilled :已经成功</li><li>rejected 已经失败</li></ul><p>状态改变：</p><p>Promise对象的状态改变，只有两种可能：</p><p>从pending变为fulfilled(resolve)</p><p>从pending变为rejected。(reject)</p><p>这两种情况只要发生，状态就凝固了，不会再变了，这时就称为resolved（已定型）</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>ES6规定，Promise对象是一个构造函数，用来生成Promise实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const promist = new Promise(function(resolve,reject)&#123;</span><br><span class="line">    if(/*异步操作成功*/)&#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</p><p>reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>Promise 实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(function(value)&#123;</span><br><span class="line">//success</span><br><span class="line">&#125;,function(error)&#123;</span><br><span class="line">//failure</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function timeout(ms)&#123;</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        setTimeout(resolve,ms,&apos;done&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">timeout(100).then((value)=&gt;&#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve,reject)&#123;</span><br><span class="line">    console.log(&apos;Promise&apos;);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(function()&#123;</span><br><span class="line">    console.log(&apos;resolved&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&apos;Hi!&apos;);</span><br><span class="line"></span><br><span class="line">//Promise</span><br><span class="line">//Hi!</span><br><span class="line">//resolved</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//异步加载图片</span><br><span class="line">function loadImageAsync(url)&#123;</span><br><span class="line">    return new Promise(function(resolve,reject)&#123;</span><br><span class="line">        const image = new Image();</span><br><span class="line">        image.onload = function()&#123;</span><br><span class="line">            resolve(image);</span><br><span class="line">        &#125;;</span><br><span class="line">        image.onerror = function()&#123;</span><br><span class="line">            reject(new Error(&apos;error&apos;);</span><br><span class="line">        &#125;;</span><br><span class="line">        image.src = url;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个用Promise对象实现的 Ajax 操作的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const getJSON = function(url) &#123;</span><br><span class="line">  const promise = new Promise(function(resolve, reject)&#123;</span><br><span class="line">    const handler = function() &#123;</span><br><span class="line">      if (this.readyState !== 4) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      if (this.status === 200) &#123;</span><br><span class="line">        resolve(this.response);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        reject(new Error(this.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    const client = new XMLHttpRequest();</span><br><span class="line">    client.open(&quot;GET&quot;, url);</span><br><span class="line">    client.onreadystatechange = handler;</span><br><span class="line">    client.responseType = &quot;json&quot;;</span><br><span class="line">    client.setRequestHeader(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">    client.send();</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getJSON(&quot;/posts.json&quot;).then(function(json) &#123;</span><br><span class="line">  console.log(&apos;Contents: &apos; + json);</span><br><span class="line">&#125;, function(error) &#123;</span><br><span class="line">  console.error(&apos;出错了&apos;, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
            <tag> 语法 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git 常用命令</title>
      <link href="/2017/10/30/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/10/30/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure><h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的代码差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br><span class="line"></span><br><span class="line"># 从本地master拉取代码更新当前分支：branch 一般为master</span><br><span class="line">$ git rebase [branch]</span><br></pre></td></tr></table></figure><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ git remote update  --更新远程仓储</span><br><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 工具 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git 创建、查看、删除、切换分支问题</title>
      <link href="/2017/10/29/git%E5%88%9B%E5%BB%BA%EF%BC%8C%E6%9F%A5%E7%9C%8B%EF%BC%8C%E5%88%A0%E9%99%A4%EF%BC%8C%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF/"/>
      <url>/2017/10/29/git%E5%88%9B%E5%BB%BA%EF%BC%8C%E6%9F%A5%E7%9C%8B%EF%BC%8C%E5%88%A0%E9%99%A4%EF%BC%8C%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF/</url>
      <content type="html"><![CDATA[<h2 id="git创建新分支，查看分支，删除分支，切换分支等问题"><a href="#git创建新分支，查看分支，删除分支，切换分支等问题" class="headerlink" title="git创建新分支，查看分支，删除分支，切换分支等问题"></a>git创建新分支，查看分支，删除分支，切换分支等问题</h2><h2 id="一、使用背景"><a href="#一、使用背景" class="headerlink" title="一、使用背景"></a>一、使用背景</h2><p>总所周知，在日常开发中，我们需要把测试服务器和正式服务器分开。相应的，为了保持正式版本能正常运行，我们需要新建一个git分支用来专门的存放正式版APP的源码。</p><p>这样，每当我们生成一个版本的时候，我们都可以把稳定版本的源码放到online这个分支上。然后在master分支上继续开发新功能。当需要升级版本的时候，我们只需要把master分支上成熟的代码推送到online分支即可。</p><h2 id="二、创建分支及其相关命令"><a href="#二、创建分支及其相关命令" class="headerlink" title="二、创建分支及其相关命令"></a>二、创建分支及其相关命令</h2><p>1、创建新分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//新建online分支</span><br><span class="line">git checkout -b online</span><br></pre></td></tr></table></figure><p>2、查看当前所有分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//查看当前所有的分支</span><br><span class="line">git branch -a</span><br><span class="line">//结果显示带*号的，而且颜色是绿色的即为我们当前所在的分支</span><br><span class="line">*master</span><br><span class="line">online</span><br></pre></td></tr></table></figure><p>3、切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//从当前的master分支切换到online分支上面</span><br><span class="line">git checkout online</span><br><span class="line">//此时可以查看分支,使用git branch即可看到master和online分支</span><br><span class="line">git branch</span><br></pre></td></tr></table></figure><p>4、删除分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//删除online分支</span><br><span class="line">git branch -d online</span><br></pre></td></tr></table></figure><p>5、本地合并新分支代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//origin是本地默认的一个名称，自己在新建本地仓库的时候是可以改名的</span><br><span class="line">//平常使用的git pull都是默认从master分支上拉去代码。这里是从online分支上拉取代码</span><br><span class="line">git pull origin online</span><br></pre></td></tr></table></figure><p>6、本地提交代码到新的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这里和上面的git pull差不多。是提交本地代码到online分支</span><br><span class="line">git push origin online</span><br></pre></td></tr></table></figure><h2 id="三、需要注意的问题"><a href="#三、需要注意的问题" class="headerlink" title="三、需要注意的问题"></a>三、需要注意的问题</h2><p>1、远程新建分支之后，本地如果立刻使用 git branch -a 查看分支的话，会看不到新建的分支。需要现在本地git pull一下。</p><p>2、如果我们已经通过git checkout master，切换到了master分支。那么我们在本地通过git pull和git push 都可以直接拉去或提交代码到master分支。git会默认使用你当前所在的分支</p>]]></content>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 工具 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js获取光标位置</title>
      <link href="/2017/10/16/js%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE/"/>
      <url>/2017/10/16/js%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="js获取光标位置"><a href="#js获取光标位置" class="headerlink" title="js获取光标位置"></a>js获取光标位置</h1><ol><li>概念和原理</li></ol><blockquote><p>DOM中并没有直接获取光标位置的方法，那么我们只能间接来获取光标位置。DOM支持获取光标选中的范围，我们可以以此为切入点，来获取或定位光标的位置。当选取范围起始点和结束点一样时，就是光标插入的位置。</p></blockquote><ul><li>术语</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">anchor(瞄点)：选区起点。</span><br><span class="line"></span><br><span class="line">focus(焦点)：选区终点。</span><br><span class="line"></span><br><span class="line">range(范围)：选区范围，包含整个节点或节点的一部分。</span><br></pre></td></tr></table></figure><ul><li>Selection</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Selection:Selection对象表示用户选择的文本范围或插入符号的位置。</span><br><span class="line"></span><br><span class="line">Selection对象存在于window对象上，可以通过window.getSelection()获取示例。</span><br></pre></td></tr></table></figure><h5 id="Selection选取的节点范围都是块级节点。input和texteare并不能作为Selection的节点"><a href="#Selection选取的节点范围都是块级节点。input和texteare并不能作为Selection的节点" class="headerlink" title="Selection选取的节点范围都是块级节点。input和texteare并不能作为Selection的节点"></a>Selection选取的节点范围都是块级节点。input和texteare并不能作为Selection的节点</h5><p>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">anchorNode:选区起点的节点。</span><br><span class="line"></span><br><span class="line">anchorOffset:选区的起点位置。</span><br><span class="line"></span><br><span class="line">focusNode:选区终点的节点。</span><br><span class="line"></span><br><span class="line">focusOffset:选区的终点位置。</span><br><span class="line"></span><br><span class="line">isCollapsed:起点和终点是否重叠。</span><br><span class="line"></span><br><span class="line">rangeCount:选区包含的range数目。</span><br></pre></td></tr></table></figure><p>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">getRangeAt(index):获取指定的选取范围。</span><br><span class="line"></span><br><span class="line">addRange(range):将一个范围添加到Selection对象中。</span><br><span class="line"></span><br><span class="line">removeRange():移出指定的范围。</span><br><span class="line"></span><br><span class="line">removeAllRanges():移出所有range对象。</span><br><span class="line"></span><br><span class="line">collapse(parentNode,offset):将光标移动到parentNode节点的offset位置。</span><br><span class="line"></span><br><span class="line">collapseToStart():取消当前选区，并把光标定位在原选区的最开始处，如果此时光标所处的位置是可编辑的，且它获得了焦点，则光标会在原地闪烁。</span><br><span class="line"></span><br><span class="line">collapseToEnd():取消当前选区，并将光标定位到原选取的最末位。如果此时光标所处的位置是可编辑的，且它获得了焦点，则光标会在原地闪烁。</span><br><span class="line"></span><br><span class="line">extend(node,offset):将终点位置移动到node节点的offset位置。</span><br><span class="line"></span><br><span class="line">modify(alter,direction,granularity):通过alter方式(move/extend)来改变光标位置，移动方向为direction(left/right)，移动单位为granularity。</span><br><span class="line"></span><br><span class="line">containsNode(aNode,aPartlyContained):判断aNode是否包含在Selection中。aPartlyContained为false表示全包含，为true表示只要部分包含即可。</span><br><span class="line"></span><br><span class="line">toString():放回当前Selection对象的字符串。</span><br></pre></td></tr></table></figure><ul><li>Range</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Range对象表示一个Selection的选择范围，一个Selection可以包含多个Range。</span><br></pre></td></tr></table></figure><p>获取对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.createRange():创建一个Range。</span><br><span class="line"></span><br><span class="line">selection.getRangeAt(index):获取指定的Range。</span><br></pre></td></tr></table></figure><p>属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">collapsed:判断起始位置是否重合。</span><br><span class="line"></span><br><span class="line">endContaniner:range终点节点。</span><br><span class="line"></span><br><span class="line">endOffset:range的终点位置。</span><br><span class="line"></span><br><span class="line">startContaniner:ranstartge起点节点。</span><br><span class="line"></span><br><span class="line">startOffset:range的起点位置。</span><br><span class="line"></span><br><span class="line">commonAncestorContainer:包含起始点的节点。</span><br></pre></td></tr></table></figure><p>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">setStart(startNode,startOffset):设置范围在startNode的起始位置为startOffset。</span><br><span class="line"></span><br><span class="line">setEnd(endNode,endOffset):设置范围在endNode的起始位置为endOffset。</span><br><span class="line"></span><br><span class="line">selectNode(referenceNode):设置range的节点为referenceNode。</span><br><span class="line"></span><br><span class="line">selectNodeContents(referenceNode):设置range的内容为referenceNode。</span><br><span class="line"></span><br><span class="line">collapse(toStart):向边界点折叠range，即是设置光标位置，toStart默认为false，表示光标定位在节点末尾。true表示光标定位在节点起点。</span><br><span class="line"></span><br><span class="line">cloneContents():克隆一个range的内容片段。</span><br><span class="line"></span><br><span class="line">deleteContents():删除range的内容片段。</span><br><span class="line"></span><br><span class="line">extractContents():将range的内容从文档树移动到文档片段中。</span><br><span class="line"></span><br><span class="line">insertNode(newNode):在range的其实位置插入新的节点。</span><br><span class="line"></span><br><span class="line">surroundContents(newNode):将range对象的内容移动到新的节点中。</span><br><span class="line"></span><br><span class="line">cloneRange():克隆一个range对象。</span><br><span class="line"></span><br><span class="line">detach():释放当前range。</span><br></pre></td></tr></table></figure><ul><li>input/textarea</li></ul><blockquote><p>在html5中，可输入性表单元素（input/textarea）都存在以下属性。不支持IE6/7。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">selectionDirection:forward | backward | none,选区方向</span><br><span class="line">selectionEnd:选区终点位置</span><br><span class="line">selectionStart:选区起点位置</span><br></pre></td></tr></table></figure><blockquote><p>setSelectionRange(selectionStart, selectionEnd, [selectionDirection]):设置获取焦点的输入性元素的选区范围。</p></blockquote><ol start="2"><li>获取光标位置</li></ol><ul><li>可编辑div获取光标位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//获取当前光标位置</span><br><span class="line">const getCursortPosition = function (element) &#123;</span><br><span class="line">  var caretOffset = 0;</span><br><span class="line">  var doc = element.ownerDocument || element.document;</span><br><span class="line">  var win = doc.defaultView || doc.parentWindow;</span><br><span class="line">  var sel;</span><br><span class="line">  if (typeof win.getSelection != &quot;undefined&quot;) &#123;//谷歌、火狐</span><br><span class="line">    sel = win.getSelection();</span><br><span class="line">    if (sel.rangeCount &gt; 0) &#123;//选中的区域</span><br><span class="line">      var range = win.getSelection().getRangeAt(0);</span><br><span class="line">      var preCaretRange = range.cloneRange();//克隆一个选中区域</span><br><span class="line">      preCaretRange.selectNodeContents(element);//设置选中区域的节点内容为当前节点</span><br><span class="line">      preCaretRange.setEnd(range.endContainer, range.endOffset);  //重置选中区域的结束位置</span><br><span class="line">      caretOffset = preCaretRange.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else if ((sel = doc.selection) &amp;&amp; sel.type != &quot;Control&quot;) &#123;//IE</span><br><span class="line">    var textRange = sel.createRange();</span><br><span class="line">    var preCaretTextRange = doc.body.createTextRange();</span><br><span class="line">    preCaretTextRange.moveToElementText(element);</span><br><span class="line">    preCaretTextRange.setEndPoint(&quot;EndToEnd&quot;, textRange);</span><br><span class="line">    caretOffset = preCaretTextRange.text.length;</span><br><span class="line">  &#125;</span><br><span class="line">  return caretOffset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">获取光标的位置是先通过获取鼠标的选取范围，然后克隆该选</span><br><span class="line">取范围，修改克隆范围的结束位置，这样克隆的范围就只剩下</span><br><span class="line">起点到结束点的内容，光标之后的内容被截取扔掉了。所以可</span><br><span class="line">以通过剩余内容的长度来确定光标位置。之所以要克隆一个选</span><br><span class="line">取范围出来，是为了避免修改光标结束位置时影响到原先内容</span><br></pre></td></tr></table></figure><p>input/textarea获取光标位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//输入框获取光标</span><br><span class="line">const getPosition = function (element) &#123;</span><br><span class="line">    let cursorPos = 0;</span><br><span class="line">    if (document.selection) &#123;//IE</span><br><span class="line">        var selectRange = document.selection.createRange();</span><br><span class="line">        selectRange.moveStart(&apos;character&apos;, -element.value.length);</span><br><span class="line">        cursorPos = selectRange.text.length;</span><br><span class="line">    &#125; else if (element.selectionStart || element.selectionStart == &apos;0&apos;) &#123;</span><br><span class="line">        cursorPos = element.selectionStart;</span><br><span class="line">    &#125;</span><br><span class="line">    return cursorPos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>设置光标位置</li></ol><blockquote><p>可编辑div设置光标位置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//设置光标位置</span><br><span class="line">const setCaretPosition = function (element, pos) &#123;</span><br><span class="line">  var range, selection;</span><br><span class="line">  if (document.createRange)//Firefox, Chrome, Opera, Safari, IE 9+</span><br><span class="line">  &#123;</span><br><span class="line">    range = document.createRange();//创建一个选中区域</span><br><span class="line">    range.selectNodeContents(element);//选中节点的内容</span><br><span class="line">    if(element.innerHTML.length &gt; 0) &#123;</span><br><span class="line">      range.setStart(element.childNodes[0], pos); //设置光标起始为指定位置</span><br><span class="line">    &#125;</span><br><span class="line">    range.collapse(true);       //设置选中区域为一个点</span><br><span class="line">    selection = window.getSelection();//获取当前选中区域</span><br><span class="line">    selection.removeAllRanges();//移出所有的选中范围</span><br><span class="line">    selection.addRange(range);//添加新建的范围</span><br><span class="line">  &#125;</span><br><span class="line">  else if (document.selection)//IE 8 and lower</span><br><span class="line">  &#123;</span><br><span class="line">    range = document.body.createTextRange();//Create a range (a range is a like the selection but invisible)</span><br><span class="line">    range.moveToElementText(element);//Select the entire contents of the element with the range</span><br><span class="line">    range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start</span><br><span class="line">    range.select();//Select the range (make it the visible selection</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> input/textarea获取光标位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 设置光标位置</span><br><span class="line">function setCaretPosition(textDom, pos)&#123;</span><br><span class="line">    if(textDom.setSelectionRange) &#123;</span><br><span class="line">        // IE Support</span><br><span class="line">        textDom.focus();</span><br><span class="line">        textDom.setSelectionRange(pos, pos);</span><br><span class="line">    &#125;else if (textDom.createTextRange) &#123;</span><br><span class="line">        // Firefox support</span><br><span class="line">        var range = textDom.createTextRange();</span><br><span class="line">        range.collapse(true);</span><br><span class="line">        range.moveEnd(&apos;character&apos;, pos);</span><br><span class="line">        range.moveStart(&apos;character&apos;, pos);</span><br><span class="line">        range.select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>示例</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;光标测试&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    p &#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      flex-direction: row;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn &#123;</span><br><span class="line">      height: 24px;</span><br><span class="line">      margin: 0 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .edit-div &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width: 225px;</span><br><span class="line">      border: 1px solid #decdcd;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line"></span><br><span class="line">    function getCursortPosition(e) &#123;</span><br><span class="line">      var eleP = e.target.parentNode; //获取父级元素</span><br><span class="line">      var pos = 0;</span><br><span class="line">      if (e.target.nodeName == &quot;DIV&quot;) &#123;</span><br><span class="line">        pos = getDivPosition(e.target);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        pos = getPosition(e.target);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      var spanEle = (eleP.childNodes)[7];</span><br><span class="line">      spanEle.innerText = pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //可编辑div获取坐标</span><br><span class="line">    const getDivPosition = function (element) &#123;</span><br><span class="line">      var caretOffset = 0;</span><br><span class="line">      var doc = element.ownerDocument || element.document;</span><br><span class="line">      var win = doc.defaultView || doc.parentWindow;</span><br><span class="line">      var sel;</span><br><span class="line">      if (typeof win.getSelection != &quot;undefined&quot;) &#123;//谷歌、火狐</span><br><span class="line">        sel = win.getSelection();</span><br><span class="line">        if (sel.rangeCount &gt; 0) &#123;//选中的区域</span><br><span class="line">          var range = win.getSelection().getRangeAt(0);</span><br><span class="line">          var preCaretRange = range.cloneRange();//克隆一个选中区域</span><br><span class="line">          preCaretRange.selectNodeContents(element);//设置选中区域的节点内容为当前节点</span><br><span class="line">          preCaretRange.setEnd(range.endContainer, range.endOffset);  //重置选中区域的结束位置</span><br><span class="line">          caretOffset = preCaretRange.toString().length;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else if ((sel = doc.selection) &amp;&amp; sel.type != &quot;Control&quot;) &#123;//IE</span><br><span class="line">        var textRange = sel.createRange();</span><br><span class="line">        var preCaretTextRange = doc.body.createTextRange();</span><br><span class="line">        preCaretTextRange.moveToElementText(element);</span><br><span class="line">        preCaretTextRange.setEndPoint(&quot;EndToEnd&quot;, textRange);</span><br><span class="line">        caretOffset = preCaretTextRange.text.length;</span><br><span class="line">      &#125;</span><br><span class="line">      return caretOffset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //输入框获取光标</span><br><span class="line">    const getPosition = function (element) &#123;</span><br><span class="line">      let cursorPos = 0;</span><br><span class="line">      if (document.selection) &#123;//IE</span><br><span class="line">        var selectRange = document.selection.createRange();</span><br><span class="line">        selectRange.moveStart(&apos;character&apos;, -element.value.length);</span><br><span class="line">        cursorPos = selectRange.text.length;</span><br><span class="line">      &#125; else if (element.selectionStart || element.selectionStart == &apos;0&apos;) &#123;</span><br><span class="line">        cursorPos = element.selectionStart;</span><br><span class="line">      &#125;</span><br><span class="line">      return cursorPos;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;label&gt;输入框测试:&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; style=&quot;width:220px&quot; onclick=&quot;getCursortPosition(event);&quot; /&gt;</span><br><span class="line">    &lt;span&gt;光标位置:&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;label&gt;文本框测试:&lt;/label&gt;</span><br><span class="line">    &lt;textarea rows=&quot;5&quot; style=&quot;width:220px&quot; onclick=&quot;getCursortPosition(event);&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;span&gt;光标位置:&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label&gt;可编辑div:&lt;/label&gt;</span><br><span class="line">    &lt;div contenteditable=&quot;true&quot; class=&quot;edit-div&quot; onclick=&quot;getCursortPosition(event);&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;span&gt;光标位置:&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初级前端必学</title>
      <link href="/2017/07/20/%E5%88%9D%E7%BA%A7%E5%89%8D%E7%AB%AF%E5%BF%85%E7%9F%A5/"/>
      <url>/2017/07/20/%E5%88%9D%E7%BA%A7%E5%89%8D%E7%AB%AF%E5%BF%85%E7%9F%A5/</url>
      <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><blockquote><p>学习HTML的基础知识</p></blockquote><blockquote><p>HTML语法</p></blockquote><blockquote><p>将页面划分多个部分并正确构建</p></blockquote><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><blockquote><p>学习css的基础知识</p></blockquote><blockquote><p>Grid布局和Flexbox布局</p></blockquote><blockquote><p>响应式web设计和媒体查询</p></blockquote><h1 id="js基础"><a href="#js基础" class="headerlink" title="js基础"></a>js基础</h1><blockquote><p>语法和基本的操作</p></blockquote><blockquote><p>DOM操作</p></blockquote><blockquote><p>变量提升、事件冒泡、原型</p></blockquote><blockquote><p>AJAX（XHR）</p></blockquote><blockquote><p>ECMA Script 6+，学习新的特性</p></blockquote><blockquote><p>JQuery（可选）</p></blockquote><h1 id="常用开发技能"><a href="#常用开发技能" class="headerlink" title="常用开发技能"></a>常用开发技能</h1><blockquote><p>GIT - 版本控制（GitHub，Bitbucket，GitLab）</p></blockquote><blockquote><p>HTTP/HTTPs协议—–请求方式：GET  POST   PUT   PATCH   DELETE   OPTIONS</p></blockquote><blockquote><p>学会寻找解决方案</p></blockquote><blockquote><p>终端的使用</p></blockquote><blockquote><p>数据结构和算法</p></blockquote><blockquote><p>设计模式</p></blockquote><h1 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h1><ol><li>包管理器</li></ol><blockquote><p>npm（一定掌握）</p></blockquote><blockquote><p>yarn（最好掌握）</p></blockquote><blockquote><p>pnpm（可以掌握）</p></blockquote><ol start="2"><li>任务运行器</li></ol><blockquote><p>npm脚本（一定掌握）</p></blockquote><blockquote><p>gulp（可以掌握）</p></blockquote><ol start="3"><li>WebPack（一定掌握）</li><li>Roolup（可以掌握）</li><li>Parcel（可以掌握）</li></ol><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><ul><li>CSS预处理器</li></ul><blockquote><p>Sass/Css（一定掌握）</p></blockquote><blockquote><p>PostCSS（一定掌握）</p></blockquote><blockquote><p>Less（可以掌握）</p></blockquote><blockquote><p>Stylus（可以掌握）</p></blockquote><ul><li>CSS框架</li></ul><blockquote><p>BootStrap（最好掌握）</p></blockquote><blockquote><p>Materialize、Material UI、Material Design Lite（最好掌握）</p></blockquote><blockquote><p>Bulma（可以掌握）</p></blockquote><blockquote><p>Semantic UI（可以掌握）</p></blockquote><ul><li>CSS架构</li></ul><blockquote><p>BEM（一定掌握）</p></blockquote><blockquote><p>CSS Modules（最好掌握）</p></blockquote><blockquote><p>Atomic（可以掌握）</p></blockquote><blockquote><p>OOCSS（可以掌握）</p></blockquote><blockquote><p>SMACSS（可以掌握）</p></blockquote><blockquote><p>SUITCSS（可以掌握）</p></blockquote><ul><li>JS编写CSS</li></ul><blockquote><p>Styled Components（最好掌握）</p></blockquote><blockquote><p>Radium（最好掌握）</p></blockquote><blockquote><p>Emotion（最好掌握）</p></blockquote><blockquote><p>JSS（可以掌握）</p></blockquote><blockquote><p>Aphrodite（可以掌握）</p></blockquote><h1 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h1><ul><li>Mobx（最好掌握）</li><li>组件状态/上下文API（一定掌握）</li><li>Redux（一定掌握）</li></ul><ol><li>异步操作（side  Effects）</li></ol><blockquote><p>Redux Thunk（最好掌握）</p></blockquote><blockquote><p>Redux Better Promise（最好掌握）</p></blockquote><blockquote><p>Redux Sage（最好掌握）</p></blockquote><blockquote><p>Redux Observable（最好掌握）</p></blockquote><ol start="2"><li>数据持久化</li></ol><blockquote><p>Redux Persist（可以掌握）</p></blockquote><blockquote><p>Redux Phoenix（可以掌握）</p></blockquote><ol start="3"><li>Redux  Form（最好掌握）</li></ol><h1 id="类型检查器"><a href="#类型检查器" class="headerlink" title="类型检查器"></a>类型检查器</h1><blockquote><p>PropTypes（一定掌握）</p></blockquote><blockquote><p>TypeScript（最好掌握）</p></blockquote><blockquote><p>Flow（最好掌握）</p></blockquote><h1 id="表单助手"><a href="#表单助手" class="headerlink" title="表单助手"></a>表单助手</h1><blockquote><p>Redux Form（最好掌握）</p></blockquote><blockquote><p>Formik（最好掌握）</p></blockquote><blockquote><p>Formsy（可以掌握）</p></blockquote><blockquote><p>Final Form（可以掌握）</p></blockquote><h1 id="API客户端"><a href="#API客户端" class="headerlink" title="API客户端"></a>API客户端</h1><ul><li>REST</li></ul><blockquote><p>Fetch（一定掌握）</p></blockquote><blockquote><p>SuperAgent（最好掌握）</p></blockquote><blockquote><p>axios（最好掌握）</p></blockquote><ul><li>GraphQL</li></ul><blockquote><p>Apollo（最好掌握）</p></blockquote><blockquote><p>Relay（可以掌握）</p></blockquote><blockquote><p>urpl（可以掌握）</p></blockquote><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><blockquote><p>React-Router（一定掌握）</p></blockquote><blockquote><p>Routers（可以掌握）</p></blockquote><blockquote><p>Redux-First Router（可以掌握）</p></blockquote><blockquote><p>Reach Router（可以掌握）</p></blockquote><h1 id="使用工具库"><a href="#使用工具库" class="headerlink" title="使用工具库"></a>使用工具库</h1><blockquote><p>Lodash（一定掌握）</p></blockquote><blockquote><p>Moment（一定掌握）</p></blockquote><blockquote><p>classnames（一定掌握）</p></blockquote><blockquote><p>Numeral（最好掌握）</p></blockquote><blockquote><p>RxJS（最好掌握）</p></blockquote><blockquote><p>Ramda（可以掌握）</p></blockquote><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ol><li>单元测试</li></ol><blockquote><p>Jest（一定掌握）</p></blockquote><blockquote><p>Enzyme（一定掌握）</p></blockquote><blockquote><p>Sinon（一定掌握）</p></blockquote><blockquote><p>Mocha（最好掌握）</p></blockquote><blockquote><p>Chai（最好掌握）</p></blockquote><blockquote><p>AVA（可以掌握）</p></blockquote><blockquote><p>Tape（可以掌握）</p></blockquote><ol start="2"><li>端到端测试</li></ol><blockquote><p>Selenlum（最好掌握）</p></blockquote><blockquote><p>Cypress（最好掌握）</p></blockquote><blockquote><p>Puppeteer（最好掌握）</p></blockquote><blockquote><p>Cucumber.js（最好掌握）</p></blockquote><ol start="3"><li>集成测试</li></ol><blockquote><p>Karma（最好掌握）</p></blockquote><h1 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h1><blockquote><p>React Int（一定掌握）</p></blockquote><blockquote><p>React i 18 next（最好掌握）</p></blockquote><h1 id="服务端渲染（SSR）"><a href="#服务端渲染（SSR）" class="headerlink" title="服务端渲染（SSR）"></a>服务端渲染（SSR）</h1><blockquote><p>next.JS（最好掌握）</p></blockquote><blockquote><p>After.JS（可以掌握）</p></blockquote><h1 id="静态网站生成器"><a href="#静态网站生成器" class="headerlink" title="静态网站生成器"></a>静态网站生成器</h1><blockquote><p>Gatsby（最好掌握）</p></blockquote><h1 id="后端集成框架"><a href="#后端集成框架" class="headerlink" title="后端集成框架"></a>后端集成框架</h1><blockquote><p>React on Rails（可以掌握）</p></blockquote><h1 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h1><blockquote><p>React Native（可以掌握）</p></blockquote><blockquote><p>Cordova / Phonegap（可以掌握）</p></blockquote><h1 id="桌面端"><a href="#桌面端" class="headerlink" title="桌面端"></a>桌面端</h1><blockquote><p>Proton Native（可以掌握）</p></blockquote><blockquote><p>Electron（可以掌握）</p></blockquote><blockquote><p>React Native Windows（可以掌握）</p></blockquote><h1 id="虚拟现实-VR"><a href="#虚拟现实-VR" class="headerlink" title="虚拟现实(VR)"></a>虚拟现实(VR)</h1><blockquote><p>React 360（可以掌握）</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ALL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>硬连接和软连接</title>
      <link href="/2017/07/06/20180706-%E7%A1%AC%E8%BF%9E%E6%8E%A5%E5%92%8C%E8%BD%AF%E8%BF%9E%E6%8E%A5/"/>
      <url>/2017/07/06/20180706-%E7%A1%AC%E8%BF%9E%E6%8E%A5%E5%92%8C%E8%BD%AF%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h1 id="Inode"><a href="#Inode" class="headerlink" title="Inode"></a>Inode</h1><ol><li>inode（即索引节点号）是Linux系统识别文件的唯一标识。</li><li>系统是通过inode来查找正确的文件数据块，并不是通过文件名。</li></ol><h4 id="Linux系统中文件数据分为两类：metadata（元数据）和data（普通数据）。"><a href="#Linux系统中文件数据分为两类：metadata（元数据）和data（普通数据）。" class="headerlink" title="Linux系统中文件数据分为两类：metadata（元数据）和data（普通数据）。"></a>Linux系统中文件数据分为两类：metadata（元数据）和data（普通数据）。</h4><p>元数据存放的是文件的附加属性，例如大小、时间戳、所有者等。普通数据才是真正的数据内容。</p><h1 id="硬链接和软链接"><a href="#硬链接和软链接" class="headerlink" title="硬链接和软链接"></a>硬链接和软链接</h1><p>在Linux系统为了解决文件共享问题，使用两种方式：hard link（硬链接）和soft link（软链接），链接不仅仅可以共享文件，还有方便管理、隐藏路径、节省空间等好处。</p><h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><h3 id="若是使用同一个inode对应多个文件，则使用的就是硬链接。"><a href="#若是使用同一个inode对应多个文件，则使用的就是硬链接。" class="headerlink" title="若是使用同一个inode对应多个文件，则使用的就是硬链接。"></a>若是使用同一个inode对应多个文件，则使用的就是硬链接。</h3><p>硬链接可以使用link和ln创建</p><p>语法：ln filename [linkname ]</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">link data link</span><br><span class="line">ln data link</span><br></pre></td></tr></table></figure><ol><li>只能和已存在的文件建立硬链接</li></ol><h4 id="我们在-app目录下进行实验，当硬链接的源文件不存在时，硬链接无法创建"><a href="#我们在-app目录下进行实验，当硬链接的源文件不存在时，硬链接无法创建" class="headerlink" title="我们在/app目录下进行实验，当硬链接的源文件不存在时，硬链接无法创建"></a>我们在/app目录下进行实验，当硬链接的源文件不存在时，硬链接无法创建</h4><ol start="2"><li>文件的inode相同和文件属性，只是文件名不同</li></ol><h4 id="我们在-app目录下创建一个data的源文件，并通过stat-命令查看文件属性，然后创建硬链接link，ll-i-查看两者的inode相同，从ctime的变化也能确定硬链接就是用一个文件"><a href="#我们在-app目录下创建一个data的源文件，并通过stat-命令查看文件属性，然后创建硬链接link，ll-i-查看两者的inode相同，从ctime的变化也能确定硬链接就是用一个文件" class="headerlink" title="我们在/app目录下创建一个data的源文件，并通过stat 命令查看文件属性，然后创建硬链接link，ll -i 查看两者的inode相同，从ctime的变化也能确定硬链接就是用一个文件"></a>我们在/app目录下创建一个data的源文件，并通过stat 命令查看文件属性，然后创建硬链接link，ll -i 查看两者的inode相同，从ctime的变化也能确定硬链接就是用一个文件</h4><ol start="3"><li>不能跨文件系统建立硬链接</li></ol><h4 id="在-dev目录下建立硬链接link，因为所在不同的文件系统，所以不能建立硬链接"><a href="#在-dev目录下建立硬链接link，因为所在不同的文件系统，所以不能建立硬链接" class="headerlink" title="在/dev目录下建立硬链接link，因为所在不同的文件系统，所以不能建立硬链接"></a>在/dev目录下建立硬链接link，因为所在不同的文件系统，所以不能建立硬链接</h4><ol start="4"><li>硬链接创建后链接数会增加</li></ol><h4 id="我们通过对link和data建立新的硬链接link2和link3，发现链数都有增长，由此也能看出硬链接实质上就是同一个文件"><a href="#我们通过对link和data建立新的硬链接link2和link3，发现链数都有增长，由此也能看出硬链接实质上就是同一个文件" class="headerlink" title="我们通过对link和data建立新的硬链接link2和link3，发现链数都有增长，由此也能看出硬链接实质上就是同一个文件"></a>我们通过对link和data建立新的硬链接link2和link3，发现链数都有增长，由此也能看出硬链接实质上就是同一个文件</h4><ol start="5"><li>不能对目录创建硬链接</li></ol><h4 id="在-app目录下创建dir1目录文件，尝试建立硬链接link4，创建失败。因为硬链接能针对目录创建"><a href="#在-app目录下创建dir1目录文件，尝试建立硬链接link4，创建失败。因为硬链接能针对目录创建" class="headerlink" title="在/app目录下创建dir1目录文件，尝试建立硬链接link4，创建失败。因为硬链接能针对目录创建"></a>在/app目录下创建dir1目录文件，尝试建立硬链接link4，创建失败。因为硬链接能针对目录创建</h4><ol start="6"><li>删除一个硬链接文件并不影响其他有相同 inode 号的文件数据</li></ol><h4 id="在删除源文件data的之前，查看源文件和链接文件的数据是一致的。在删除data之后，其他的硬链接文件的内容不受影响，只是链接数减少了"><a href="#在删除源文件data的之前，查看源文件和链接文件的数据是一致的。在删除data之后，其他的硬链接文件的内容不受影响，只是链接数减少了" class="headerlink" title="在删除源文件data的之前，查看源文件和链接文件的数据是一致的。在删除data之后，其他的硬链接文件的内容不受影响，只是链接数减少了"></a>在删除源文件data的之前，查看源文件和链接文件的数据是一致的。在删除data之后，其他的硬链接文件的内容不受影响，只是链接数减少了</h4><h1 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h1><h2 id="软链接的特性"><a href="#软链接的特性" class="headerlink" title="软链接的特性"></a>软链接的特性</h2><ol><li><p>软链接其实存放的就是源文件的路径，所以如果文件的内容数据是另一个文件的路径时，这个文件就是软链接。</p></li><li><p>软链接有自己独立的inode和文件属性，这点和硬链接有本质的区别</p></li></ol><p>语法：ln -s filename [linkname ]</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">link -s data link</span><br><span class="line">ln -s data link</span><br></pre></td></tr></table></figure><ol><li>软链接可对不存在文件建立链接</li></ol><h4 id="在-app的空目录中，建立软链接，目录下没有文件，但链接依旧能建立，找不到目标文件会有报错提示"><a href="#在-app的空目录中，建立软链接，目录下没有文件，但链接依旧能建立，找不到目标文件会有报错提示" class="headerlink" title="在/app的空目录中，建立软链接，目录下没有文件，但链接依旧能建立，找不到目标文件会有报错提示"></a>在/app的空目录中，建立软链接，目录下没有文件，但链接依旧能建立，找不到目标文件会有报错提示</h4><ol start="2"><li>软链接有自己的inode和属性</li></ol><h4 id="在目录下建立文件soft，之后对soft设置软链接slink，通过stat-命令查看soft和slink的文件属性，可以看出和之前硬链接的本质区别，不论是权限、inode、时间戳、大小、数据块都不同"><a href="#在目录下建立文件soft，之后对soft设置软链接slink，通过stat-命令查看soft和slink的文件属性，可以看出和之前硬链接的本质区别，不论是权限、inode、时间戳、大小、数据块都不同" class="headerlink" title="在目录下建立文件soft，之后对soft设置软链接slink，通过stat 命令查看soft和slink的文件属性，可以看出和之前硬链接的本质区别，不论是权限、inode、时间戳、大小、数据块都不同"></a>在目录下建立文件soft，之后对soft设置软链接slink，通过stat 命令查看soft和slink的文件属性，可以看出和之前硬链接的本质区别，不论是权限、inode、时间戳、大小、数据块都不同</h4><ol start="3"><li>软链接可跨文件系统建立</li></ol><h4 id="在-dev目录下建立test文件目录用于实验，然后设置软链接testlink"><a href="#在-dev目录下建立test文件目录用于实验，然后设置软链接testlink" class="headerlink" title="在/dev目录下建立test文件目录用于实验，然后设置软链接testlink"></a>在/dev目录下建立test文件目录用于实验，然后设置软链接testlink</h4><ol start="4"><li>软链接可以对目录文件建立</li></ol><h4 id="接着直接以-app-testdir为目标文件，和-dev-test目录文件，建立软链接"><a href="#接着直接以-app-testdir为目标文件，和-dev-test目录文件，建立软链接" class="headerlink" title="接着直接以/app/testdir为目标文件，和/dev/test目录文件，建立软链接"></a>接着直接以/app/testdir为目标文件，和/dev/test目录文件，建立软链接</h4><ol start="5"><li>软链接创建不会增加链接数</li></ol><h4 id="建立了软链接，而链接数还是1没有改变"><a href="#建立了软链接，而链接数还是1没有改变" class="headerlink" title="建立了软链接，而链接数还是1没有改变"></a>建立了软链接，而链接数还是1没有改变</h4><ol start="6"><li>删除软链接并不影响源文件，但删除源文件软链接就会变成死链接，若链接指向的路径文件被重新建立，则链接恢复</li></ol><h4 id="在-app目录下再创创建一个软链接slink2，在我们删除slink之后，源文件soft和slink2都没有受到影响，但当我们把soft文件删除后，slink2就变成了死链接，不再能显示数据"><a href="#在-app目录下再创创建一个软链接slink2，在我们删除slink之后，源文件soft和slink2都没有受到影响，但当我们把soft文件删除后，slink2就变成了死链接，不再能显示数据" class="headerlink" title="在/app目录下再创创建一个软链接slink2，在我们删除slink之后，源文件soft和slink2都没有受到影响，但当我们把soft文件删除后，slink2就变成了死链接，不再能显示数据"></a>在/app目录下再创创建一个软链接slink2，在我们删除slink之后，源文件soft和slink2都没有受到影响，但当我们把soft文件删除后，slink2就变成了死链接，不再能显示数据</h4><h2 id="其他相关命令"><a href="#其他相关命令" class="headerlink" title="其他相关命令"></a>其他相关命令</h2><p>使用find 命令可以查找链接文件</p><ol><li>查找目录文件下相同inode的文件</li></ol><h4 id="find-dirs-inum-inode"><a href="#find-dirs-inum-inode" class="headerlink" title="find /dirs inum inode"></a>find /dirs inum inode</h4><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>硬链接本质上就是同一个文件的不同文件名。软链接就是独立的文件，不过文件中存放的是源文件的路径。</p>]]></content>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>箭头函数</title>
      <link href="/2017/07/06/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/2017/07/06/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="箭头函数没有arugments"><a href="#箭头函数没有arugments" class="headerlink" title="箭头函数没有arugments"></a>箭头函数没有arugments</h2><p>普通函数有arguments</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function a()&#123; console.log(arguments) &#125;</span><br><span class="line">a(1,2,3)</span><br><span class="line"></span><br><span class="line">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br></pre></td></tr></table></figure><p>箭头函数才有 arguments</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = ()=&gt;&#123; console.log(arguments) &#125;</span><br><span class="line">b(1,2,3)</span><br><span class="line">// VM13852:1 Uncaught ReferenceError: arguments is not defined</span><br></pre></td></tr></table></figure><h2 id="箭头函数的this为定义时的环境"><a href="#箭头函数的this为定义时的环境" class="headerlink" title="箭头函数的this为定义时的环境"></a>箭头函数的this为定义时的环境</h2><p>函数定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="params">()</span>=&gt;</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;</span><br></pre></td></tr></table></figure><p>真实函数定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>( <span class="built_in">window</span> )&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="params">()</span>=&gt;</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 箭头函数原理</span></span><br><span class="line">    <span class="keyword">var</span> c = <span class="function">(<span class="params"> (v</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">        &#125;.bind( v )</span><br><span class="line"></span><br><span class="line">    &#125; )( <span class="keyword">this</span> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a;</span><br><span class="line"><span class="comment">// ƒ a()&#123; console.log(this) &#125;</span></span><br><span class="line">b;</span><br><span class="line"><span class="comment">// ()=&gt;&#123; console.log(this) &#125;</span></span><br></pre></td></tr></table></figure><p>执行返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a()</span><br><span class="line"><span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …&#125;</span></span><br><span class="line"></span><br><span class="line">b()</span><br><span class="line"><span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …&#125;</span></span><br></pre></td></tr></table></figure><p>其他对象调用返回<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;&#125;</span><br><span class="line">obj.name = <span class="string">'myObj'</span>;</span><br><span class="line">obj.fa = a;</span><br><span class="line">obj.fb = b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj.fa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;fa: ƒ, name: "myObj", fb: ƒ&#125;</span></span><br><span class="line">obj.fb();</span><br><span class="line"><span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …&#125;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端求职面试问题</title>
      <link href="/2017/07/05/20180705-%E5%BC%80%E6%BA%90%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2017/07/05/20180705-%E5%BC%80%E6%BA%90%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>( 前端求职面试问题 )</p><h1 id="Front-end-Job-Interview-Questions"><a href="#Front-end-Job-Interview-Questions" class="headerlink" title="Front-end Job Interview Questions"></a>Front-end Job Interview Questions</h1><h2 id="Table-of-Contents-目录表"><a href="#Table-of-Contents-目录表" class="headerlink" title="Table of Contents( 目录表 )"></a>Table of Contents( 目录表 )</h2><ol><li>General Questions   （ 一般的问题 ）</li><li>HTML Questions       ( HTML问题 )</li><li>CSS Questions        ( CSS问题 )</li><li>JS Questions         ( JS问题 )</li><li>Network Questions    ( 网络问题 )</li><li>Coding Questions     ( 代码问题 )</li><li>Fun Questions        ( 有趣的问题 )</li></ol><hr><h3 id="General-Questions"><a href="#General-Questions" class="headerlink" title="General Questions"></a>General Questions</h3><ul><li>What did you learn yesterday/this week?<blockquote><p>昨天或者说这个星期你学到了什么？</p></blockquote></li><li>What excites or interests you about coding?<blockquote><p>你对代码感兴趣吗？</p></blockquote></li><li>What is a recent technical challenge you experienced and how did you solve it?<blockquote><p>你最近遇到的技术挑战是什么?你是如何解决的？</p></blockquote></li><li>What UI, Security, Performance, SEO, Maintainability or Technology considerations do you make while building a web application or site?<blockquote><p>在构建web应用程序或站点时，你会做哪些UI，安全性，性能，SEO，可维护性或技术方面的考虑</p></blockquote></li><li>Talk about your preferred development environment.<blockquote><p>谈谈你喜欢的开发环境</p></blockquote></li><li>Which version control systems are you familiar with?<blockquote><p>你熟悉哪些版本控制系统  </p></blockquote></li><li>Can you describe your workflow when you create a web page?<blockquote><p>当你创建网页时，能描述你的工作流程吗？</p></blockquote></li><li>If you have 5 different stylesheets, how would you best integrate them into the site?<blockquote><p>如果你有5个不同的样式表，你如何将它们最好的集成到站点中？</p></blockquote></li><li>Can you describe the difference between progressive enhancement and graceful degradation?<blockquote><p>你能描述渐进增强和优雅退化的区别吗？</p></blockquote></li><li>How would you optimize a website’s assets/resources?<blockquote><p>如何优化你的站点资源</p></blockquote></li><li>How many resources will a browser download from a given domain at a time?<blockquote><p>一次有多少资源将会被从一个给定的域下载</p></blockquote></li><li>What are the exceptions?<blockquote><p>将会有什么异常</p></blockquote></li><li>Name 3 ways to decrease page load (perceived or actual load time).<blockquote><p>列出3种减少页面</p></blockquote></li><li>If you jumped on a project and they used tabs and you used spaces, what would you do?<blockquote><p> 如果你临时加入一个项目，他们用Tabs你使用spaces，你会怎么做</p></blockquote></li><li>Describe how you would create a simple slideshow page.<blockquote><p> 描述如何创建一个简单的幻灯片页面？</p></blockquote></li><li>If you could master one technology this year, what would it be?<blockquote><p> 如果今年你能掌握一项技术，会是什么？</p></blockquote></li><li>Explain the importance of standards and standards bodies.<blockquote><p> 解释标准和标准机构的重要性  </p></blockquote></li><li>What is Flash of Unstyled Content? How do you avoid FOUC?<blockquote><p> 什么是无格式内容的Flash？如何避免犯规？</p></blockquote></li><li><p>Explain what ARIA（Accessible Rich Internet Applications ） and screenreaders are, and how to make a website accessible.</p><blockquote><p>解释下什么是ARIA和screenreaders，并且如何建立一个可用性站点</p></blockquote></li><li><p>Explain some of the pros and cons for CSS animations versus JavaScript animations.</p><blockquote><p> 解释CSS动画和Javascript动画的利弊？</p></blockquote></li></ul><hr><h3 id="HTML-Questions"><a href="#HTML-Questions" class="headerlink" title="HTML Questions:"></a>HTML Questions:</h3><ul><li>What does a doctype do?<blockquote><p>DOCTYPE是做什么的？</p></blockquote></li><li>What’s the difference between standards mode and quirks mode?<blockquote><p> 标准和模型和怪癖盒模型有什么不同  </p></blockquote></li><li>What’s the difference between HTML and XHTML?<blockquote><p>HTML和XHTML之间的不同</p></blockquote></li><li>Are there any problems with serving pages as application/xhtml+xml?<blockquote><p> 服务页面作为应用程序，XHTML+XML有什么问题</p></blockquote></li><li>How do you serve a page with content in multiple languages?<blockquote><p> 如何使用多语言的内容服务页面</p></blockquote></li><li>What kind of things must you be wary of when design or developing for multilingual sites?<blockquote><p> 当设计或开发多语言网站时，你必须谨防什么样的事情？</p></blockquote></li><li>What are data- attributes good for?<blockquote><p> 数据类型有什么用？</p></blockquote></li><li>Consider HTML5 as an open web platform. What are the building blocks of HTML5?<blockquote><p> 将HTML5视为一个开放的web平台，HTML5的组成部分是什么？</p></blockquote></li><li>Describe the difference between a cookie, sessionStorage and localStorage.<blockquote><p> 描述一下cookie，sessionStorage和localStorage之间的区别</p></blockquote></li><li>Describe the difference between <script>, <script async> and <script defer>.<blockquote><p> 描述一下<script>,<script async>和<script defer>之间的不同？</p></blockquote></li><li>Why is it generally a good idea to position CSS <link>s between <head></head> and JS <script>s just before </body>? Do you know any exceptions?<blockquote><p> 为什么css的<link>标签要在head标签内，JS的<script>标签在<body>标签之前，你知道什么情况下例外？</p></blockquote></li><li>What is progressive rendering?<blockquote><p> 什么是渐进式渲染？</p></blockquote></li><li>Have you used different HTML templating languages before?<blockquote><p> 你之前使用过不同的HTML的模板语言吗？</p></blockquote></li></ul><hr><h3 id="CSS-Questions"><a href="#CSS-Questions" class="headerlink" title="CSS Questions:"></a>CSS Questions:</h3><ul><li>What is the difference between classes and ID’s in CSS?</li><li>id选择器与class选择器的不同</li><li>What’s the difference between “resetting” and “normalizing” CSS? Which would you choose, and why?<blockquote><p> 重置和标准化css有什么区别？你会选哪一个？为什么？</p></blockquote></li><li>Describe Floats and how they work.<blockquote><p> 描述浮动一级它是如何工作的？</p></blockquote></li><li>Describe z-index and how stacking context is formed.<blockquote><p>描述一下z-index和它是如何与其他的元素堆叠在一起的</p></blockquote></li><li>Describe BFC(Block Formatting Context) and how it works.<blockquote><p> 描述下BFC（块级格式化上下文）以及其工作原理？</p></blockquote></li><li>What are the various clearing techniques and which is appropriate for what context?<blockquote><p> 什么是各种结算技术，都是用于什么背景？</p></blockquote></li><li>Explain CSS sprites, and how you would implement them on a page or site.<blockquote><p> 解释CSS sprites，以及如何在页面或站点上实现它们？</p></blockquote></li><li>What are your favourite image replacement techniques and which do you use when?<blockquote><p> 你最喜欢的图像替换技术是什么？你会什么时候使用？</p></blockquote></li><li>How would you approach fixing browser-specific styling issues?<blockquote><p> 如何解决浏览器特定的样式问题？</p></blockquote></li><li>How do you serve your pages for feature-constrained browsers?<blockquote><p>如何为你的页面提供浏览器受限制的特性</p></blockquote></li></ul><ul><li>What techniques/processes do you use?<blockquote><p> 你使用的是什么技术，以及过程？</p></blockquote></li><li>What are the different ways to visually hide content (and make it available only for screen readers)?<blockquote><p> 有什么不同的方式来直观地隐藏内容（并使其仅适用于屏幕阅读器）？</p></blockquote></li><li>Have you ever used a grid system, and if so, what do you prefer?<blockquote><p> 你有没有用过栅格系统，有过有，你喜欢它什么？</p></blockquote></li><li>Have you used or implemented media queries or mobile specific layouts/CSS?<blockquote><p> 您使用或实现了媒体查询或移动特定布局</p></blockquote></li><li>Are you familiar with styling SVG?<blockquote><p> 你熟悉SVG样式吗？</p></blockquote></li><li>How do you optimize your webpages for print?<blockquote><p> 如何优化网页打印？</p></blockquote></li><li>What are some of the “gotchas” for writing efficient CSS?<blockquote><p> 什么是编写高效CSS的“窍门”？</p></blockquote></li><li>What are the advantages/disadvantages of using CSS preprocessors?<blockquote><p> 使用CSS预处理器的优点和缺点是什么？</p></blockquote></li><li>Describe what you like and dislike about the CSS preprocessors you have used.<blockquote><p> 描述你喜欢和不喜欢你使用的CSS预处理器。</p></blockquote></li><li>How would you implement a web design comp that uses non-standard fonts?<blockquote><p> 如何实现使用非标准字体的Web设计COMP？</p></blockquote></li><li>Explain how a browser determines what elements match a CSS selector.<blockquote><p> 解释浏览器如何确定哪些元素与CSS选择器匹配。</p></blockquote></li><li>Describe pseudo-elements and discuss what they are used for.<blockquote><p> 描述伪元素并讨论它们的用途。</p></blockquote></li><li>Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.<blockquote><p> 解释您对模型的理解，以及如何告诉CSS中的浏览器在不同的盒模型中呈现布局。</p></blockquote></li><li>What does * { box-sizing: border-box; } do? What are its advantages?<blockquote><p> { box-sizing: border-box; }是做什么的？它的有点是什么</p></blockquote></li><li>List as many values for the display property that you can remember.<blockquote><p> 尽可能的列出你记住的display的属性值</p></blockquote></li><li>What’s the difference between inline and inline-block?</li><li>inline与inline-block之间的不同</li><li>What’s the difference between a relative, fixed, absolute and statically positioned element?</li><li>relative，fixed，absoult，和statically这些定位元素之间的不同</li><li>The ‘C’ in CSS stands for Cascading. How is priority determined in assigning styles (a few examples)? How can you use this system to your advantage?</li><li>CSS中的“C”代表级联。如何在分配样式中确定优先级（几个例子）？你如何利用这个系统来发挥你的优势？</li><li>What existing CSS frameworks have you used locally, or in production? How would you change/improve them?<blockquote><p> 现有的CSS框架在本地或生产中使用过吗？你将如何改变/改进它们？</p></blockquote></li><li>Have you played around with the new CSS Flexbox or Grid specs?<blockquote><p> 你使用过新的Flexbox或Grid specs？</p></blockquote></li><li>How is responsive design different from adaptive design?<blockquote><p> 为什么响应设计和适应设计不同？</p></blockquote></li><li>Have you ever worked with retina graphics? If so, when and what techniques did you use?<blockquote><p> 你曾经使用视网膜图形吗？如果是的话，你使用什么技术？</p></blockquote></li><li>Is there any reason you’d want to use translate() instead of absolute positioning, or vice-versa? And why?<blockquote><p> 在什么情况下你想使用translate()代替定位，反之亦然？为什么？</p></blockquote></li></ul><hr><h3 id="JS-Questions"><a href="#JS-Questions" class="headerlink" title="JS Questions:"></a>JS Questions:</h3><ul><li>Explain event delegation<blockquote><p> 解释事件委托</p></blockquote></li><li>Explain how this works in JavaScript<blockquote><p> 解释如何在JavaScript中工作</p></blockquote></li><li>Explain how prototypal inheritance works<blockquote><p> 解释原型继承是如何工作的</p></blockquote></li><li>What do you think of AMD vs CommonJS?<blockquote><p> 你认为AMD和CommonJS那个更好</p></blockquote></li><li>Explain why the following doesn’t work as an IIFE: function foo(){ }();.<blockquote><p> 解释下面的函数不工作作为一个IIFE：function foo(){}()</p></blockquote></li><li>What needs to be changed to properly make it an IIFE?<blockquote><p> 需要改变什么才能使之成为IFIE？</p></blockquote></li><li>What’s the difference between a variable that is: null, undefined or undeclared?<blockquote><p> 变量是空的、未定义的或未声明的变量之间的区别是什么？</p></blockquote></li><li>How would you go about checking for any of these states?<blockquote><p> 你会怎么去检查这些变量</p></blockquote></li><li>What is a closure, and how/why would you use one?<blockquote><p> 什么是闭包，以及如何/为什么要使用？</p></blockquote></li><li>What’s a typical use case for anonymous functions?<blockquote><p> 匿名函数的典型用例是什么？</p></blockquote></li><li>How do you organize your code? (module pattern, classical inheritance?)<blockquote><p> 如何组织代码？（模块模式，经典继承？）</p></blockquote></li><li>What’s the difference between host objects and native objects?<blockquote><p> 主机对象和本地对象有什么区别？</p></blockquote></li><li>Difference between: function Person(){}, var person = Person(), and var person = new Person()?<blockquote><p> 这三个函数之间的区别</p></blockquote></li><li>What’s the difference between .call and .apply?</li><li>call和apply之间的区别？</li><li>Explain Function.prototype.bind.<blockquote><p> 解释一下 Function.prototype.bind.</p></blockquote></li><li>When would you use document.write()?<blockquote><p> 你什么时候会使用document.write()？</p></blockquote></li><li>What’s the difference between feature detection, feature inference, and using the UA string?<blockquote><p> 特性检查，特性推断和UA字符串之间的不同？</p></blockquote></li><li>Explain AJAX in as much detail as possible.<blockquote><p> 尽可能详细的解释AJAX</p></blockquote></li><li>Explain how JSONP works (and how it’s not really AJAX).<blockquote><p> 解释一下JSONP是如何工作的（和为什么他不是AJAX）</p></blockquote></li><li>Have you ever used JavaScript templating?<blockquote><p> 你曾经使用过JavaScript模板吗？</p></blockquote></li><li>If so, what libraries have you used?<blockquote><p> 如果是这样的话，你有用过什么库吗？</p></blockquote></li><li>Explain “hoisting”.<blockquote><p> 解释一下‘hosting’</p></blockquote></li><li>Describe event bubbling.<blockquote><p> 描述一下冒泡事件？</p></blockquote></li><li>What’s the difference between an “attribute” and a “property”?<blockquote><p> “attribute” 和 “property”?之间的区别？</p></blockquote></li><li>Why is extending built-in JavaScript objects not a good idea?<blockquote><p> 为什么继承在JavaScript对象中使用不适合？</p></blockquote></li><li>Difference between document load event and document ready event?<blockquote><p> 文档加载事件与文档准备事件的区别？</p></blockquote></li><li>What is the difference between == and ===?<blockquote><p> == 和 === 之间的不同？</p></blockquote></li><li>Explain the same-origin policy with regards to JavaScript.<blockquote><p> 解释关于JavaScript的同源策略。</p></blockquote></li><li>Make this work:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">duplicate([1,2,3,4,5]); // [1,2,3,4,5,1,2,3,4,5]</span><br></pre></td></tr></table></figure><ul><li>Why is it called a Ternary expression, what does the word “Ternary” indicate?<blockquote><p> 为什么它被称为三元表达式，“三元”这个词表示什么？</p></blockquote></li><li>What is “use strict”;? what are the advantages and disadvantages to using it?<blockquote></blockquote></li><li>Create a for loop that iterates up to 100 while outputting “fizz” at multiples of 3, “buzz” at multiples of 5 and “fizzbuzz” at multiples of 3 and 5</li><li>Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?</li><li>Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?</li><li>Explain what a single page app is and how to make one SEO-friendly.</li><li>What is the extent of your experience with Promises and/or their polyfills?</li><li>What are the pros and cons of using Promises instead of callbacks?</li><li>What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?</li></ul><hr><h3 id="Testing-Questions"><a href="#Testing-Questions" class="headerlink" title="Testing Questions:"></a>Testing Questions:</h3><ul><li>What are some advantages/disadvantages to testing your code?<blockquote><p> 测试代码有哪些优点/缺点？</p></blockquote></li><li>What tools would you use to test your code’s functionality?<blockquote><p> 你会用什么工具来测试你的代码的功能？</p></blockquote></li><li>What is the difference between a unit test and a functional/integration test?<blockquote><p> 单元测试一个功能和集成测试之间的区别是什么？</p></blockquote></li><li>What is the purpose of a code style linting tool?<blockquote><p> 规范代码的风格的工具的目的是什么？</p></blockquote></li></ul><hr><h3 id="Performance-Questions"><a href="#Performance-Questions" class="headerlink" title="Performance Questions:"></a>Performance Questions:</h3><ul><li>What tools would you use to find a performance bug in your code?<blockquote><p> 你用什么工具来找到代码中的性能缺陷？</p></blockquote></li><li>What are some ways you may improve your website’s scrolling performance?<blockquote><p> 你有什么方法可以提高你的网站的滚动性能？</p></blockquote></li><li>Explain the difference between layout, painting and compositing.<blockquote><p> 解释一下layout，painting，compositing之间的区别?</p></blockquote></li></ul><hr><h3 id="Network-Questions"><a href="#Network-Questions" class="headerlink" title="Network Questions:"></a>Network Questions:</h3><ul><li>Traditionally, why has it been better to serve site assets from multiple domains?<blockquote><p> 传统上，为什么可以更好地为来自多个域的站点资产提供服务？</p></blockquote></li><li>Do your best to describe the process from the time you type in a website’s URL to it finishing loading on your screen.<blockquote><p> 尽你所能描述从你输入一个网站的URL到它完成你的屏幕上的加载的过程。</p></blockquote></li><li>What are the differences between Long-Polling, Websockets and Server-Sent Events?</li><li><p>Long-Polling，Websockets和Server-Sent Events之间的不同？</p></li><li><p>Explain the following request and response headers:</p></li><li>Diff. between Expires, Date, Age and If-Modified-…</li><li>Do Not Track</li><li>Cache-Control</li><li>Transfer-Encoding</li><li>ETag</li><li>X-Frame-Options</li></ul><blockquote><p>解释以下response和request的头信息</p></blockquote><ul><li>What are HTTP actions? List all HTTP actions that you know, and explain them.<blockquote><p> 什么是http请求？列出你所知道的http请求并解释它们</p></blockquote></li></ul><hr><h3 id="Coding-Questions"><a href="#Coding-Questions" class="headerlink" title="Coding Questions:"></a>Coding Questions:</h3><p>Question: What is the value of foo?</p><ul><li>foo的值为多少<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var foo = 10 + &apos;20&apos;;</span><br></pre></td></tr></table></figure></li></ul><p>Question: How would you make this work?</p><blockquote><p> 你怎么做这个工作？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(2, 5); // 7</span><br><span class="line">add(2)(5); // 7</span><br></pre></td></tr></table></figure><p>Question: What value is returned from the following statement?</p><blockquote><p> 下面的语句返回什么值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;i&apos;m a lasagna hog&quot;.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br></pre></td></tr></table></figure><p>Question: What is the value of window.foo?</p><ul><li>window.foo的值为什么？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( window.foo || ( window.foo = &quot;bar&quot; ) );</span><br></pre></td></tr></table></figure><p>Question: What is the outcome of the two alerts below?</p><blockquote><p> 下面两个函数分别会弹出什么结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var foo = &quot;Hello&quot;;</span><br><span class="line">(function() &#123;</span><br><span class="line">var bar = &quot; World&quot;;</span><br><span class="line">alert(foo + bar);</span><br><span class="line">&#125;)();</span><br><span class="line">alert(foo + bar);</span><br></pre></td></tr></table></figure><p>Question: What is the value of foo.length?</p><ul><li>foo.length的值是什么</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var foo = [];</span><br><span class="line">foo.push(1);</span><br><span class="line">foo.push(2);</span><br></pre></td></tr></table></figure><p>Question: What is the value of foo.x?</p><ul><li>foo.x的结果是什么</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var foo = &#123;n: 1&#125;;</span><br><span class="line">var bar = foo;</span><br><span class="line">foo.x = foo = &#123;n: 2&#125;;</span><br></pre></td></tr></table></figure><h3 id="Fun-Questions"><a href="#Fun-Questions" class="headerlink" title="Fun Questions:"></a>Fun Questions:</h3><ul><li>What’s a cool project that you’ve recently worked on?<br>*你最近有没有做什么很酷的项目</li><li>What are some things you like about the developer tools you use?<blockquote><p> 你喜欢哪些开发工具？</p></blockquote></li><li>Do you have any pet projects? What kind?<blockquote><p> 你有很喜欢的项目吗？什么样的？</p></blockquote></li><li>What’s your favorite feature of Internet Explorer?<blockquote><p> 你最喜欢的Internet Explorer的特性是什么？</p></blockquote></li><li>How do you like your coffee?<blockquote><p> 你喜欢喝什么样的咖啡？</p></blockquote></li></ul></script></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> JS </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
